/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.EventObject;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import koneksi.koneksi;

/**
 *
 * @author ika
 */
public class kurs1 extends javax.swing.JDialog {

    Connection conec;
    public kurs1(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        reset();
        setLocationRelativeTo(this);
        setAlwaysOnTop(true);
        this.setTitle("Nilai Tukar Rupiah");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        btnCancel.setIcon(new ImageIcon(getClass().getResource("/image/left-arrow9.png")));
        jButton3.setIcon(new ImageIcon(getClass().getResource("/image/plussign8.png")));
        jButton4.setIcon(new ImageIcon(getClass().getResource("/image/letterx.png")));
        fieldfalse();
        conec = new koneksi().connection();
        numbering();
        createtable();
        auto_refresh();
        stardate.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
        enddate.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelKurs = new javax.swing.JTable();
        jPanel2 = new style.PanelTransparan();
        jLabel3 = new javax.swing.JLabel();
        tfid = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        stardate = new com.alee.extended.date.WebDateField();
        jLabel5 = new javax.swing.JLabel();
        enddate = new com.alee.extended.date.WebDateField();
        jLabel6 = new javax.swing.JLabel();
        cbcur = new javax.swing.JComboBox();
        tfcur = new javax.swing.JTextField();
        lblcur = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfprice = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        tfsearch = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MAINTAIN KURS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PT. SUMBER SURYA MANDIRI");

        tabelKurs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelKurs);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Kurs Nilai Tukar Rupiah"));

        jLabel3.setText("ID");

        tfid.setText("jTextField1");

        jLabel4.setText("Start Date");

        stardate.setText("webDateField1");

        jLabel5.setText("End Date");

        enddate.setText("webDateField2");

        jLabel6.setText("Currency");

        cbcur.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".:: Pilih Currency ::.", "USD", "EUR", "Other" }));
        cbcur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcurActionPerformed(evt);
            }
        });

        tfcur.setText("jTextField2");

        lblcur.setText("Enter Currency");

        jLabel8.setText("Price / Currency");

        jLabel9.setText("Rp.");

        tfprice.setText("jTextField3");
        tfprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfpriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfpriceKeyTyped(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfid, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbcur, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stardate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enddate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(tfcur, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblcur))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfprice, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubmit)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(stardate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(enddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbcur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfcur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblcur))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(tfprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        tfsearch.setText("jTextField4");

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbcurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcurActionPerformed
         if(cbcur.getSelectedItem().toString().equals("Other")){
            tfcur.setVisible(true);
            lblcur.setVisible(true);
        }else{
            tfcur.setVisible(false);
            lblcur.setVisible(false);
        }
    }//GEN-LAST:event_cbcurActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        fieldtrue();
        btnSubmit.setText("Save");
        btnSubmit.setIcon(new ImageIcon(getClass().getResource("/image/diskette25.png")));
        btnSubmit.setVisible(true);
        btnCancel.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        fieldfalse();
        reset();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        if(btnSubmit.getText().equals("Save")){
            save();
        }
        
        if(btnSubmit.getText().equals("Update")){
            update();
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void tfpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfpriceKeyReleased
        NumberFormat no = NumberFormat.getInstance();
        double nominal = Long.valueOf(tfprice.getText().replace(",", "").replace(".", "").trim());
        no.setMaximumFractionDigits(3);
        tfprice.setText(no.format(nominal));
    }//GEN-LAST:event_tfpriceKeyReleased

    private void tfpriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfpriceKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfpriceKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(kurs1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(kurs1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(kurs1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kurs1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                kurs1 dialog = new kurs1(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbcur;
    private com.alee.extended.date.WebDateField enddate;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblcur;
    private com.alee.extended.date.WebDateField stardate;
    private javax.swing.JTable tabelKurs;
    private javax.swing.JTextField tfcur;
    private javax.swing.JTextField tfid;
    private javax.swing.JTextField tfprice;
    private javax.swing.JTextField tfsearch;
    // End of variables declaration//GEN-END:variables

    private void reset(){
        stardate.setText("");
        enddate.setText("");
        cbcur.setSelectedIndex(0);
        tfprice.setText("");
        tfcur.setText("");
        tfid.setEnabled(false);
        tfsearch.setText("");
        
        tfcur.setVisible(false);
        lblcur.setVisible(false);
        btnSubmit.setVisible(false);
        btnCancel.setVisible(false);
    }
    private void fieldfalse() {
        stardate.setEnabled(false);
        enddate.setEnabled(false);
        cbcur.setEnabled(false);
        tfprice.setEnabled(false);
    }

    private void fieldtrue() {
        stardate.setEnabled(true);
        enddate.setEnabled(true);
        cbcur.setEnabled(true);
        tfprice.setEnabled(true);
    }

    private void save() {
        String a = tfid.getText();
        String b = stardate.getText();
        String c = enddate.getText();
        String d = "";
        if(cbcur.getSelectedItem().toString().equals("Other")){
            d = tfcur.getText();
        }else{
            d = cbcur.getSelectedItem().toString();
        }
        String e = tfprice.getText().replace(",", "").replace(".", "");
        
        String sql = "insert into kurs (id, date_start, date_end, price_type, price) values (?,?,?,?,?)";
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, a);
            ps.setString(2, b);
            ps.setString(3, c);
            ps.setString(4, d);
            ps.setString(5, e);
            ps.executeUpdate();

            //JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan");
            reset();
            numbering();
        } catch (SQLException ex) {
            Logger.getLogger(kurs1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void update(){
        String a = tfid.getText();
        String b = stardate.getText();
        String c = enddate.getText();
        String d = "";
        if(cbcur.getSelectedItem().toString().equals("Other")){
            d = tfcur.getText();
        }else{
            d = cbcur.getSelectedItem().toString();
        }
        String e = tfprice.getText().replace(",", "").replace(".", "");
        
        String sql = "update kurs set date_start=?, date_end=?, price_type=?, price=? where id=?";
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, b);
            ps.setString(2, c);
            ps.setString(3, d);
            ps.setString(4, e);
            ps.setString(5, a);
            ps.executeUpdate();

           // JOptionPane.showMessageDialog(null, "Data berhasil diubah");
            reset();
            numbering();
        } catch (SQLException ex) {
            Logger.getLogger(kurs1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void auto_refresh() {
        Timer timer = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                createtable();
            }
        });

        timer.setDelay(3000); // delay for 30 seconds
        timer.start();
    }

    public void createtable() {
        String sql = "SELECT * FROM kurs "
                + " where id like ? "
                + " or date_start like ? "
                + " or date_end like ? "
                + " or price_type like ? "
                + " or price like ? "
                + "ORDER BY id";
        DefaultTableModel a = new DefaultTableModel();
        a.addColumn("ID");
        a.addColumn("Start Date");
        a.addColumn("End Date");
        a.addColumn("Currency");
        a.addColumn("Price/Curr");
        a.addColumn("Action");  
        tabelKurs.setModel(a);
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, "%"+tfsearch.getText()+"%");
            ps.setString(2, "%"+tfsearch.getText()+"%");
            ps.setString(3, "%"+tfsearch.getText()+"%");
            ps.setString(4, "%"+tfsearch.getText()+"%");
            ps.setString(5, "%"+tfsearch.getText()+"%");
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                a.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("date_start"),
                    rs.getString("date_end"),
                    rs.getString("price_type"),
                    rs.getString("price"),
                    ""
                });
                TableColumn kolom = tabelKurs.getColumn("Action");
                kolom.setCellRenderer(new ButtonsRenderer());
                kolom.setCellEditor(new ButtonsEditor(tabelKurs));
//                
//                int rows = tabelCutomer.getRowHeight();
//                tabelCutomer.setRowHeight(30);
                System.out.println("Tabel Customer Sukses");
            }
            new AturKolom(tabelKurs);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel Customer Gagal");
        }
    }

    private void numbering() {
        String sql = "Select id from kurs order by id desc";
        try {
            Statement st = conec.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if(rs.first()){
                String no = rs.getString("id");
                if(no != null){
                    int num = Integer.valueOf(no)+1;

                    tfid.setText(String.valueOf(num));
                }else{
                    tfid.setText("1");
                }
            }else{
                tfid.setText("1");
            }
        } catch (SQLException ex) {
            Logger.getLogger(kurs1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    class ButtonsPanel extends JPanel{
        List <JButton> buttons = Arrays.asList(
                new JButton("", new ImageIcon(getClass().getResource("/image/rubbish7.png"))), 
                new JButton("", new ImageIcon(getClass().getResource("/image/pencil117.png")))
                );
        public ButtonsPanel(){
            super();
            setOpaque(true);
            for(JButton b : buttons){
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                add(b);
            }
        }
    }
    
    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer{

        public ButtonsRenderer(){
            super();
            setName("Table.cellRenderer");
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            setBackground(isSelected?table.getSelectionBackground():table.getBackground());
            return this;
        }
    }
    
    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
        protected transient ChangeEvent changeEvent;
        private final JTable table;
        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                }
            }
            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override public void run() {
                        fireEditingStopped();
                    }
                });
            }
        }
        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            buttons.get(0).setAction(new DeleteAction(table));
            buttons.get(1).setAction(new EditAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b: buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            addMouseListener(handler);
        }
        @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }
        @Override public Object getCellEditorValue() {
            return "";
        }

        //Copied from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        //protected transient ChangeEvent changeEvent;
        @Override public boolean isCellEditable(EventObject e) {
            return true;
        }
        @Override public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        @Override public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }
        @Override public void cancelCellEditing() {
            fireEditingCanceled();
        }
        @Override public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }
        @Override public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }
        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                   //if (Objects.isNull(changeEvent)) {
                    if (Objects.equals(i, changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (Objects.equals(i, changeEvent)) {
//                    if (Objects.isNull(changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }
    }
    
    
    class DeleteAction extends AbstractAction {
        private final JTable table;
        public DeleteAction(JTable table) {
            super("delete");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int baris = tabelKurs.getSelectedRow();
            int kolom = tabelKurs.getSelectedColumn();
            String data = tabelKurs.getValueAt(baris, kolom).toString();
            String id = tabelKurs.getValueAt(baris, 0).toString();
            String d = tabelKurs.getValueAt(baris, 1).toString();
            String ef = tabelKurs.getValueAt(baris, 2).toString();
            
            //int selectedOption = JOptionPane.showConfirmDialog(null, 
            //                      "Yakin untuk menghapus data Kurs Harga \n"+d+" - "+ef, 
            //                      "Hapus Data", 
            //                      JOptionPane.YES_NO_OPTION); 
            //if (selectedOption == JOptionPane.YES_OPTION) { 
                delete(id);
            //}
        }

        private void delete(String id) {
            String sql = "Delete from kurs where id=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, id);
                ps.executeUpdate();
                //JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                createtable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(tabelKurs, "Terjadi kesalahan : "+ex);
            }
        }
    }

    class EditAction extends AbstractAction {
        private final JTable table;
        public EditAction(JTable table) {
            super("edit");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabelKurs.getSelectedRow();
            int kolom = tabelKurs.getSelectedColumn();
            String data = tabelKurs.getValueAt(baris, kolom).toString();
            String id = tabelKurs.getValueAt(baris, 0).toString();
            String start = tabelKurs.getValueAt(baris, 1).toString();
            String end = tabelKurs.getValueAt(baris, 2).toString();
            String curr = tabelKurs.getValueAt(baris, 3).toString();
            String prc = tabelKurs.getValueAt(baris, 4).toString();
            
            tfid.setText(id);
            stardate.setText(start);
            enddate.setText(end);
            if(!curr.equals("USD") || !curr.equals("EUR")){
                tfcur.setText(curr);
                cbcur.setSelectedItem("Other");
                tfcur.setVisible(true);
                lblcur.setVisible(true);
            }else{
                cbcur.setSelectedItem(curr);
                tfcur.setVisible(false);
                lblcur.setVisible(false);
            }
            tfprice.setText(prc);
            
            
            btnSubmit.setText("Update");
            btnSubmit.setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
            btnSubmit.setVisible(true);
            btnCancel.setVisible(true);
            btnSubmit.setEnabled(true);
            btnCancel.setEnabled(true);
            fieldtrue();
        }
    }
    
}
