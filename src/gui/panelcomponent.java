/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Calendar;
import java.util.EventObject;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import koneksi.koneksi;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JExcelApiExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author subki
 */
public class panelcomponent extends javax.swing.JFrame {

    Connection conec;
    String param;
    public panelcomponent() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setTitle("Data Master Panel Component");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        conec = new koneksi().connection();
        param ="";
        jButton1.setIcon(new ImageIcon(getClass().getResource("/image/plussign8.png")));
        jButton2.setIcon(new ImageIcon(getClass().getResource("/image/letterx.png")));
        //jButton3.setIcon(new ImageIcon(getClass().getResource("/image/zoomin.png")));
        tableHeader();
        tableDetail();
        auto_refresh();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new style.Images();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new style.PanelTransparan();
        tfsearchH = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelHeader = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new style.PanelTransparan();
        tfsearchD = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelDetail = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MASTER DATA PANEL COMPONENT");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PT. SUMBER SURYA MANDIRI");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Header"));

        tfsearchH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfsearchHKeyPressed(evt);
            }
        });

        tabelHeader.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelHeaderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelHeader);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tfsearchH, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfsearchH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Detail Panel"));

        tabelDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelDetail);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tfsearchD, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfsearchD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jSeparator2)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelHeaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelHeaderMouseClicked
        int row = tabelHeader.getSelectedRow();
        int col = tabelHeader.getSelectedColumn();
        param = tabelHeader.getValueAt(row, 0).toString();
        tableDetail();
    }//GEN-LAST:event_tabelHeaderMouseClicked

    private void tfsearchHKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfsearchHKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            tableHeader();
        }
    }//GEN-LAST:event_tfsearchHKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        deleteTemp();
        panelcomponentform frm = new panelcomponentform(null, true);
        frm.getBtnSubmit().setText("Save");
        frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/diskette25.png")));
        frm.getBtnCancel().setIcon(new ImageIcon(getClass().getResource("/image/door9.png")));
        frm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        new menu().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelcomponent().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tabelDetail;
    private javax.swing.JTable tabelHeader;
    private javax.swing.JTextField tfsearchD;
    private javax.swing.JTextField tfsearchH;
    // End of variables declaration//GEN-END:variables
    
    private void auto_refresh() {
        Timer timer = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                tableHeader();
            }
        });

        timer.setDelay(3000); // delay for 30 seconds
        timer.start();
    }

    public void tableHeader() {
        String sql = "SELECT * FROM product_panel "
                + " where product_no like ? "
                + " or description like ? "
                + " ORDER BY product_no";
        DefaultTableModel a = new DefaultTableModel();
        a.addColumn("Product No");
        a.addColumn("Deskripsi");
        a.addColumn("Harga Aktual");
        a.addColumn("Harga Jual");
        a.addColumn("Action");  
        tabelHeader.setModel(a);
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, "%"+tfsearchH.getText()+"%");
            ps.setString(2, "%"+tfsearchH.getText()+"%");
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                a.addRow(new Object[]{
                    rs.getString("product_no"),
                    rs.getString("description"),
                    rs.getString("act_price"),
                    rs.getString("deal_price"),
                    ""
                });
                TableColumn kolom = tabelHeader.getColumn("Action");
                kolom.setCellRenderer(new ButtonsRenderer());
                kolom.setCellEditor(new ButtonsEditor(tabelHeader));
//                
//                int rows = tabelCutomer.getRowHeight();
//                tabelCutomer.setRowHeight(30);
                System.out.println("Tabel Customer Sukses");
            }
            new AturKolom(tabelHeader);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel Customer Gagal");
        }
    }

//    private void deleteTemp() {
//        String sql = "truncate table temp_panel";
//        try {
//            Statement st = conec.createStatement();
//            st.executeUpdate(sql);
//            
//            System.out.println("Berhasil di kosongin");
//        } catch (SQLException ex) {
//            Logger.getLogger(panelcomponent.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//    }
    
    class ButtonsPanel extends JPanel{
        List <JButton> buttons = Arrays.asList(
                new JButton("", new ImageIcon(getClass().getResource("/image/rubbish7.png"))), 
                new JButton("", new ImageIcon(getClass().getResource("/image/pencil117.png"))),
                new JButton("", new ImageIcon(getClass().getResource("/image/printer70.png")))
                );
        public ButtonsPanel(){
            super();
            setOpaque(true);
            for(JButton b : buttons){
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                add(b);
            }
        }
    }
    
    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer{

        public ButtonsRenderer(){
            super();
            setName("Table.cellRenderer");
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            setBackground(isSelected?table.getSelectionBackground():table.getBackground());
            return this;
        }
    }
    
    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
        protected transient ChangeEvent changeEvent;
        private final JTable table;
        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                }
            }
            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override public void run() {
                        fireEditingStopped();
                    }
                });
            }
        }
        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            buttons.get(0).setAction(new DeleteAction(table));
            buttons.get(1).setAction(new EditAction(table));
            buttons.get(2).setAction(new PrintAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b: buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            addMouseListener(handler);
        }
        @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }
        @Override public Object getCellEditorValue() {
            return "";
        }

        //Copied from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        //protected transient ChangeEvent changeEvent;
        @Override public boolean isCellEditable(EventObject e) {
            return true;
        }
        @Override public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        @Override public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }
        @Override public void cancelCellEditing() {
            fireEditingCanceled();
        }
        @Override public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }
        @Override public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }
        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                   //if (Objects.isNull(changeEvent)) {
                    if (Objects.equals(i, changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (Objects.equals(i, changeEvent)) {
//                    if (Objects.isNull(changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }
    }
    
    
    class DeleteAction extends AbstractAction {
        private final JTable table;
        public DeleteAction(JTable table) {
            super("del");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int baris = tabelHeader.getSelectedRow();
            int kolom = tabelHeader.getSelectedColumn();
            String data = tabelHeader.getValueAt(baris, kolom).toString();
            String id = tabelHeader.getValueAt(baris, 0).toString();
            String d = tabelHeader.getValueAt(baris, 1).toString();
            
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Yakin untuk menghapus data Master Panel Komponen :  \n"+d, 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
                deleteHeader(id);
            }
        }

        private void deleteHeader(String id) {
            String sql = "Delete from product_panel where product_no=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                tableHeader();
                deleteDetail(id);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(tabelHeader, "Terjadi kesalahan : "+ex);
            }
        }
    }
    
    class EditAction extends AbstractAction {
        private final JTable table;
        public EditAction(JTable table) {
            super("edt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabelHeader.getSelectedRow();
            int kolom = tabelHeader.getSelectedColumn();
            String data = tabelHeader.getValueAt(baris, kolom).toString();
            String no = tabelHeader.getValueAt(baris, 0).toString();
            String d = tabelHeader.getValueAt(baris, 1).toString();
            
//            deleteTemp();
            
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Yakin untuk mengedit data Master Panel Komponen :  \n"+d, 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
//                detail_to_temp(no);
                panelcomponentform frm = new panelcomponentform(null, true);
                frm.getTfnomor().setText(no);
                frm.getTadeskrip().setText(d);
                frm.getBtnSubmit().setText("Update");
                frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
                frm.getBtnCancel().setIcon(new ImageIcon(getClass().getResource("/image/door9.png")));
                frm.setVisible(true);
            }
            
            
            
        }

//        private void detail_to_temp(String no) {
//            String sql = "insert into temp_panel (product_no, item_no, qty, act_price, deal_price) "
//                     + "select product_no, item_no, qty, act_price, deal_price from product_panel_detail where product_no=?";
//            
//            try {
//                PreparedStatement ps = conec.prepareStatement(sql);
//                ps.setString(1, no);
//                ps.executeUpdate();
//                
//                System.out.println("master berhasil di transfer ke temporrary");
//            } catch (SQLException ex) {
//                Logger.getLogger(panelcomponent.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }
    
    class PrintAction extends AbstractAction {
        private final JTable table;

        private PrintAction(JTable table) {
            super("prt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabelHeader.getSelectedRow();
            int kolom = tabelHeader.getSelectedColumn();
            String data = tabelHeader.getValueAt(baris, kolom).toString();
            String no = tabelHeader.getValueAt(baris, 0).toString();
            //print
            String kurs;
            double cur;
            final JComboBox curr;
            final JTextField tfcurr;
            try {
                PreparedStatement ps = conec.prepareStatement("select distinct price_type as curr from kurs");
                ResultSet rs = ps.executeQuery();
                curr = new JComboBox();
                tfcurr = new JTextField();
                while(rs.next()){
                    curr.addItem(rs.getString("curr"));
                }
                JPanel cr = new JPanel(new GridLayout(0, 2));
                cr.add(new JLabel("Pilih Currency"));
                cr.add(Box.createHorizontalStrut(20));
                cr.add(new JLabel("Currency"));
                cr.add(curr);
                cr.add(tfcurr);
                curr.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String a = curr.getSelectedItem().toString();
                        Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH)+1;
                            String b = String.valueOf(bln);
                            if(b.length()==1){
                                b = "0"+b;
                            }
                            String tgl = String.valueOf(thn)+"-"+b;
                        try {
                            PreparedStatement pr = conec.prepareStatement("select price from kurs where price_type=? and date_start like?");
                            pr.setString(1, a);
                            pr.setString(2, tgl+"%");
                            ResultSet rr = pr.executeQuery();
                            if(rr.next()){
                                tfcurr.setText(rr.getString("price"));
                            }else{
                                tfcurr.setText("1");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
                int opt_cr = JOptionPane.showConfirmDialog(null, cr, "Change Currency", JOptionPane.OK_CANCEL_OPTION);
                if(opt_cr==JOptionPane.OK_OPTION){
                    cur = Double.valueOf(tfcurr.getText());
                    kurs=curr.getSelectedItem().toString();
                }else{
                    cur = 1;
                    kurs=curr.getSelectedItem().toString();
                }
                //cetak
                printkomponen(no, cur, kurs);
            } catch (SQLException ex) {
                Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void printkomponen(String no, double cur, String kurs) {
            try {
                koneksi kon = new koneksi();
                Connection con = kon.connection();

                Calendar kalender = new GregorianCalendar();
                int thn = kalender.get(Calendar.YEAR);
                int bln = kalender.get(Calendar.MONTH);
                int tgl = kalender.get(Calendar.DATE);
                String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                //String nama_file = no+" "+String.valueOf(prefix);

                HashMap map = new HashMap();
                map.put("nomor", no);
                map.put("curr", cur);
                map.put("kurs", kurs);

               // JOptionPane.showMessageDialog(null, map);
                
                File report = new File("c:/SSM/report/componentreport.jasper");
                JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                //JasperViewer.viewReport(jasperPrint,false);
                JRXlsExporter exporter= new JRXlsExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                //exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{"component"});

                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/Detail Panel "+prefix+".xls");
          
                exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                exporter.exportReport();

                //JOptionPane.showMessageDialog(null, "Data perhasil di print ke format Excel. \nOpen C:/SSM/print/Price "+prefix+".xls");
                int option = JOptionPane.showConfirmDialog(null, 
                            "Data berhasil di print ke format Excel. \nOpen File Detail Panel "+prefix+".xls?", "Export Excel", JOptionPane.YES_NO_OPTION);
                    if(option==JOptionPane.YES_OPTION){
                        try {
                            Desktop.getDesktop().open(new File("C:\\SSM\\print\\Detail Panel "+prefix+".xls"));
                        } catch (IOException ex) {
                            Logger.getLogger(panelcomponent.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
            } catch (JRException ex) {
                Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void deleteDetail(String id){
        String sql = "delete from product_panel_detail where product_no=?";
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, id);
            ps.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Rincian berhasil dihapus");
            tableDetail();
        } catch (SQLException ex) {
            Logger.getLogger(panelcomponent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void tableDetail(){
        String sql = "SELECT a.product_no, b.item_no, c.name, b.qty, b.act_price, b.deal_price "
                + " FROM product_panel a "
                + " left join product_panel_detail b on a.product_no = b.product_no "
                + " left join component c on b.item_no = c.item_no "
                + " where a.product_no like ? "
                + " ORDER BY a.product_no";
        DefaultTableModel a = new DefaultTableModel();
        a.addColumn("Product No");
        a.addColumn("Material ID");
        a.addColumn("Specification");
        a.addColumn("Harga Aktual");
        a.addColumn("Harga Jual");
        a.addColumn("Jumlah"); 
        tabelDetail.setModel(a);
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, "%"+param+"%");
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                a.addRow(new Object[]{
                    rs.getString("product_no"),
                    rs.getString("item_no"),
                    rs.getString("name"),
                    rs.getString("act_price"),
                    rs.getString("deal_price"),
                    rs.getString("qty")
                });
//                int rows = tabelCutomer.getRowHeight();
//                tabelCutomer.setRowHeight(30);
                System.out.println("Tabel Customer Sukses");
            }
            new AturKolom(tabelDetail);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel Customer Gagal");
        }
    }
}
