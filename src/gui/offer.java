/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.EventObject;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import koneksi.koneksi;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JExcelApiExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author subki
 */
public class offer extends javax.swing.JFrame {

    Connection conec;
    public offer() {
        initComponents();
        setLocationRelativeTo(this);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        this.setTitle("Offer Letters");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        jButton1.setIcon(new ImageIcon(getClass().getResource("/image/plussign8.png")));
        jButton2.setIcon(new ImageIcon(getClass().getResource("/image/letterx.png")));
        conec = new koneksi().connection();
        createtable();
        auto_refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new style.Images();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        tfsearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("OFFER LETTERS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PT. SUMBER SURYA MANDIRI");

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        offerform frm = new offerform(null, true);
        frm.getBtnCari().setVisible(true);
        frm.getBtnPrint().setText("Save & Print");
        frm.getBtnSubmit().setText("Save");
        frm.submit = "Save";
        frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/diskette25.png")));
        frm.getBtnPrint().setIcon(new ImageIcon(getClass().getResource("/image/diskette25.png")));
        frm.nomor_faktur();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        new menu().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(offer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(offer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(offer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(offer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new offer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfsearch;
    // End of variables declaration//GEN-END:variables
    
    private void auto_refresh() {
        Timer timer = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                createtable();
            }
        });

        timer.setDelay(3000); // delay for 30 seconds
        timer.start();
    }

    
    public void createtable() {
        String sql = "SELECT * FROM offer"
                + " where offer_no like ? "
                + "ORDER BY offer_no";
        DefaultTableModel a = new DefaultTableModel();
        a.addColumn("Quo. No");
        a.addColumn("Customer");
        a.addColumn("Tanggal");
        a.addColumn("Discount");
        a.addColumn("PPN");
        a.addColumn("Subject"); 
        a.addColumn("Action");  
        jTable1.setModel(a);
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, "%"+tfsearch.getText()+"%");
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                String cust = rs.getString("customer");
                String nama_customer = cari_customer(cust);
                
                a.addRow(new Object[]{
                    rs.getString("offer_no"),
                    nama_customer,
                    rs.getString("tgl"),
                    rs.getString("discount"),
                    rs.getString("ppn"),
                    rs.getString("subjek"),
                    ""
                });
                TableColumn kolom = jTable1.getColumn("Action");
                kolom.setCellRenderer(new ButtonsRenderer());
                kolom.setCellEditor(new ButtonsEditor(jTable1));
//                
//                int rows = tabelCutomer.getRowHeight();
//                tabelCutomer.setRowHeight(30);
                System.out.println("Tabel FCM Sukses");
            }
            new AturKolom(jTable1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel FCM Gagal");
        }
    }

    private String cari_customer(String cust) {
        String sql = "select * from customer where id=?";
        String nama = null;
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, cust);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                nama = rs.getString("nama");
                return nama;
            }else{
                nama = cust;
                return nama;
            }
        } catch (SQLException ex) {
            Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(nama);
        return nama;
    }

    
    class ButtonsPanel extends JPanel{
        List <JButton> buttons = Arrays.asList(
                new JButton("", new ImageIcon(getClass().getResource("/image/rubbish7.png"))), 
                new JButton("", new ImageIcon(getClass().getResource("/image/pencil117.png"))),
                new JButton("", new ImageIcon(getClass().getResource("/image/printer70.png")))
                );
        public ButtonsPanel(){
            super();
            setOpaque(true);
            for(JButton b : buttons){
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                add(b);
            }
        }
    }
    
    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer{

        public ButtonsRenderer(){
            super();
            setName("Table.cellRenderer");
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            setBackground(isSelected?table.getSelectionBackground():table.getBackground());
            return this;
        }
    }
    
    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
        protected transient ChangeEvent changeEvent;
        private final JTable table;
        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                }
            }
            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override public void run() {
                        fireEditingStopped();
                    }
                });
            }
        }
        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            buttons.get(0).setAction(new DeleteAction(table));
            buttons.get(1).setAction(new EditAction(table));
            buttons.get(2).setAction(new PrintAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b: buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            addMouseListener(handler);
        }
        @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }
        @Override public Object getCellEditorValue() {
            return "";
        }

        //Copied from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        //protected transient ChangeEvent changeEvent;
        @Override public boolean isCellEditable(EventObject e) {
            return true;
        }
        @Override public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        @Override public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }
        @Override public void cancelCellEditing() {
            fireEditingCanceled();
        }
        @Override public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }
        @Override public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }
        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                   //if (Objects.isNull(changeEvent)) {
                    if (Objects.equals(i, changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (Objects.equals(i, changeEvent)) {
//                    if (Objects.isNull(changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }
    }
    
    
    class DeleteAction extends AbstractAction {
        private final JTable table;
        public DeleteAction(JTable table) {
            super("del");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int baris = jTable1.getSelectedRow();
            int kolom = jTable1.getSelectedColumn();
            String data = jTable1.getValueAt(baris, kolom).toString();
            String id = jTable1.getValueAt(baris, 0).toString();
            String d = jTable1.getValueAt(baris, 1).toString();
            
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Yakin untuk menghapus data  \n"+d, 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
                delete(id);
            }
        }

        private void delete(String id) {
            String sql = "Delete from offer where offer_no=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                delete_detail(id);
                createtable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(jTable1, "Terjadi kesalahan : "+ex);
            }
        } 

        private void delete_detail(String id) {
            String sql = "Delete from offer_detail where offer_no=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                delete_detail(id);
                createtable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(jTable1, "Terjadi kesalahan : "+ex);
            }
        }
    }

    class EditAction extends AbstractAction {
        private final JTable table;
        public EditAction(JTable table) {
            super("edt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = jTable1.getSelectedRow();
            int kolom = jTable1.getSelectedColumn();
            String data = jTable1.getValueAt(baris, kolom).toString();
            String no = jTable1.getValueAt(baris, 0).toString();
            String detail = jTable1.getValueAt(baris, 1).toString();
            
            offerform frm = new offerform(null, true);
            frm.getTfnomor().setText(no);
            frm.search_header(no, detail);
            frm.getBtnSubmit().setText("Update");
            frm.getBtnPrint().setText("Update & Print");
            frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
            frm.getBtnPrint().setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
            frm.setVisible(true);
            System.out.println(no);
            
        }
    }
    
    class PrintAction extends AbstractAction {
        private final JTable table;

        private PrintAction(JTable table) {
            super("prt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = jTable1.getSelectedRow();
            int kolom = jTable1.getSelectedColumn();
            String data = jTable1.getValueAt(baris, kolom).toString();
            String no = jTable1.getValueAt(baris, 0).toString();
            String cur, kurs;
            final JComboBox curr;
            final JTextField tfcurr;
            try {
                PreparedStatement ps = conec.prepareStatement("select distinct price_type as curr from kurs");
                ResultSet rs = ps.executeQuery();
                curr = new JComboBox();
                tfcurr = new JTextField();
                while(rs.next()){
                    curr.addItem(rs.getString("curr"));
                }
                JPanel cr = new JPanel(new GridLayout(0, 2));
                cr.add(new JLabel("Pilih Currency"));
                cr.add(Box.createHorizontalStrut(20));
                cr.add(new JLabel("Currency"));
                cr.add(curr);
                cr.add(tfcurr);
                curr.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String a = curr.getSelectedItem().toString();
                        Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH)+1;
                            String b = String.valueOf(bln);
                            if(b.length()==1){
                                b = "0"+b;
                            }
                            String tgl = String.valueOf(thn)+"-"+b;
                        try {
                            PreparedStatement pr = conec.prepareStatement("select price from kurs where price_type=? and date_start like?");
                            pr.setString(1, a);
                            pr.setString(2, tgl+"%");
                            ResultSet rr = pr.executeQuery();
                            if(rr.next()){
                                tfcurr.setText(rr.getString("price"));
                            }else{
                                tfcurr.setText("1");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
                int opt_cr = JOptionPane.showConfirmDialog(null, cr, "Change Currency", JOptionPane.OK_CANCEL_OPTION);
                if(opt_cr==JOptionPane.OK_OPTION){
                    cur = tfcurr.getText();
                    kurs=curr.getSelectedItem().toString();
                }else{
                    cur = "1";
                    kurs=curr.getSelectedItem().toString();
                }
                //cetak
                cetak(no, cur, kurs);
            } catch (SQLException ex) {
                Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void cetak(String no, String cur, String kurs) {
            System.out.println(no);
            //create folder
            File file = new File("C:\\SSM\\print\\"+no+"");
            if (!file.exists()) {
                if (file.mkdir()) {
                    System.out.println("Directory is created!");
                } else {
                    System.out.println("Failed to create directory!");
                }
            }
            
            String ambil_kode = "select product_no from offer_detail where offer_no=?";
            
            ArrayList<HashMap<String, String>> arr = new ArrayList<HashMap<String,String>>();
            HashMap<String, String> kode;
            
            try {
                PreparedStatement ps = conec.prepareStatement(ambil_kode);
                ps.setString(1, no);
                ResultSet rs = ps.executeQuery();
                while(rs.next()){
                    kode = new HashMap<String, String>();
                    kode.put("product_no", rs.getString("product_no"));
                    arr.add(kode);
                    System.out.println(arr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
            }
            //cetak detail nya
            cetak_product(arr, no, cur, kurs);
            
            //Cetak FCM sama offer nya
            cetak_offer(no, cur, kurs);
            
            //open file folder nya
            try {
                Desktop.getDesktop().open(new File("C:\\SSM\\print\\"+no));
            } catch (IOException ex) {
                Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void cetak_product(ArrayList<HashMap<String, String>> arr, String no, String cur, String kurs) {
            String cek_panel = "select * from product_panel where product_no=?;";
            String cek_box = "select * from product_box where product_no=?";
            String cek_fs = "select * from product_standing where product_no=?";
            
            int curInterger = Integer.valueOf(cur);
            double curDouble= Double.valueOf(cur);
            for(int i = 0; i<arr.size(); i++){
                String produk = arr.get(i).get("product_no").toString();
                
                //cek ke panel
                try {
                    PreparedStatement ps = conec.prepareStatement(cek_panel);
                    ps.setString(1, produk);
                    ResultSet rs = ps.executeQuery();
                    if(rs.next()){
                        //cetak panel
                        try {
                            koneksi kon = new koneksi();
                            Connection con = kon.connection();

                            Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH)+1;
                            int tgl = kalender.get(Calendar.DATE);
                            String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                            //String nama_file = no+" "+String.valueOf(prefix);

                            HashMap map = new HashMap();
                            map.put("nomor", produk);
                            map.put("curr", curDouble);
                            map.put("kurs", kurs);

                            File report = new File("c:/SSM/report/componentreport.jasper");
                            JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                            //JasperViewer.viewReport(jasperPrint,false);
                            JRXlsExporter exporter= new JRXlsExporter();
                            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                            exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                            exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                            exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                            exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                            //exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                            exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                            exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{no+" "+produk});

                            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/"+no+"/"+no+" "+produk+" "+prefix+".xls");

                            //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                            exporter.exportReport();

                        } catch (JRException ex) {
                            Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //cek ke box
                try {
                    PreparedStatement ps = conec.prepareStatement(cek_box);
                    ps.setString(1, produk);
                    ResultSet rs = ps.executeQuery();
                    if(rs.next()){
                        //cetak box
                        try {
                            koneksi kon = new koneksi();
                            Connection con = kon.connection();

                            Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH);
                            int tgl = kalender.get(Calendar.DATE);
                            String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                            //String nama_file = no+" "+String.valueOf(prefix);

                            HashMap map = new HashMap();
                            map.put("kode", produk);
                            map.put("cur", curInterger);
                            map.put("kurs", kurs);

                            File report = new File("c:/SSM/report/boxreport.jasper");
                            JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                            //JasperViewer.viewReport(jasperPrint,false);
                            JRXlsExporter exporter= new JRXlsExporter();
                            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                            exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                            exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                            exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                            exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                            //exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                            exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                            exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{no+" "+produk});

                            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/"+no+"/"+no+" "+produk+" "+prefix+".xls");

                            //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                            exporter.exportReport();

                        } catch (JRException ex) {
                            Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //cek ke freestanding
                try {
                    PreparedStatement ps = conec.prepareStatement(cek_fs);
                    ps.setString(1, produk);
                    ResultSet rs = ps.executeQuery();
                    if(rs.next()){
                        //cetak fs
                        try {
                            koneksi kon = new koneksi();
                            Connection con = kon.connection();

                            Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH);
                            int tgl = kalender.get(Calendar.DATE);
                            String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                            //String nama_file = no+" "+String.valueOf(prefix);

                            HashMap map = new HashMap();
                            map.put("kode", produk);
                            map.put("cur", curInterger);
                            map.put("kurs", kurs);

                            File report = new File("c:/SSM/report/standingreport.jasper");
                            JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                            //JasperViewer.viewReport(jasperPrint,false);
                            JRXlsExporter exporter= new JRXlsExporter();
                            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                            exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                            exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                            exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                            exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                            //exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                            exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                            exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{no+" "+produk});

                            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/"+no+"/"+no+" "+produk+" "+prefix+".xls");

                            //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                            exporter.exportReport();

                        } catch (JRException ex) {
                            Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }

        private void cetak_offer(String no, String cur, String kurs) {
            
            //cetak offer
            try {
                koneksi kon = new koneksi();
                Connection con = kon.connection();

                Calendar kalender = new GregorianCalendar();
                int thn = kalender.get(Calendar.YEAR);
                int bln = kalender.get(Calendar.MONTH)+1;
                int tgl = kalender.get(Calendar.DATE);
                String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                //String nama_file = no+" "+String.valueOf(prefix);

                HashMap map = new HashMap();
                map.put("nomor", no);
                map.put("cur", Integer.valueOf(cur));
                map.put("kurs", kurs);

                //JOptionPane.showMessageDialog(rootPane, map);
                File report = new File("c:/SSM/report/suboffer2.jasper");
                JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                //JasperViewer.viewReport(jasperPrint,false);
                JRXlsExporter exporter= new JRXlsExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                //exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{"OFFER "+no});

                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/"+no+"/OFFER "+no+" "+prefix+".xls");

                //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                exporter.exportReport();

            } catch (JRException ex) {
                Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
}
