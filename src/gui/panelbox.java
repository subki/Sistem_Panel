/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.EventObject;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.*;
import koneksi.koneksi;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JExcelApiExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.swing.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author ika
 */
public class panelbox extends javax.swing.JFrame {

    Connection conec;
    public panelbox() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setTitle("Master Box Panel");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        conec = new koneksi().connection();
        createtable();
        auto_refresh();
        jButton1.setIcon(new ImageIcon(getClass().getResource("/image/plussign8.png")));
        jButton2.setIcon(new ImageIcon(getClass().getResource("/image/letterx.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new style.Images();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tfsearch = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelBox = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel3 = new  style.ImageBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DATA MASTER BOX PANEL");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PT. SUMBER SURYA MANDIRI");

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tabelBox.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelBox);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Volume Box");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setText("1 : Height");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel4.setText("2 : Weight");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel3.setText("3 : Dimension");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Additional");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Support Fee");

        jLabel12.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel12.setText("1 : Material Prc/Kg");

        jLabel13.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel13.setText("2 : Colour Prc/Kg");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setText("3 : Labour Prc/Kg");

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel8.setText("1 : Plus");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel9.setText("2 : Thickness");

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel10.setText("3 : Berat Jenis");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Hitung Luas");

        jLabel16.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel16.setText("1 : Luas Box");

        jLabel17.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel17.setText("2 : Luas Mounting Plate");

        jLabel18.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel18.setText("3 : Luas Door");

        jLabel19.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel19.setText("5 : Luas Chasis");

        jLabel20.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel20.setText("4 : Luas Topi");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel15))
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel13)
                    .addComponent(jLabel9)
                    .addComponent(jLabel17)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14)
                    .addComponent(jLabel10)
                    .addComponent(jLabel18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 82, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        panelboxform frm = new panelboxform(null, true);
        frm.getBtnSubmit().setText("Save");
        frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/diskette25.png")));
        frm.getBtnCancel().setIcon(new ImageIcon(getClass().getResource("/image/door9.png")));
        frm.reset();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        new menu().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelbox().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tabelBox;
    private javax.swing.JTextField tfsearch;
    // End of variables declaration//GEN-END:variables
    
    private void auto_refresh() {
        Timer timer = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                createtable();
            }
        });

        timer.setDelay(3000); // delay for 30 seconds
        timer.start();
    }

    public void createtable() {
        String sql = "SELECT * FROM product_box "
                + " where product_no like ? "
                + " or description like ? "
                + " or specification like ? "
                + " ORDER BY product_no";
        DefaultTableModel dm = new DefaultTableModel(){
            public Class getColumnClass(int columnIndex) {
                return String.class;
            }
        };
        dm.addColumn("Kode");
        dm.addColumn("Deskripsi");
        dm.addColumn("Spesifikasi");
        dm.addColumn("Unit");
        dm.addColumn("Vol Box");
        //dm.addColumn("H");
        //dm.addColumn("W");
        //dm.addColumn("D"); 
        dm.addColumn("Addtional");  
//        dm.addColumn("Plus");  
//        dm.addColumn("Thick");  
//        dm.addColumn("Brt Jns");  
        dm.addColumn("Hitung Luas");  
//        dm.addColumn("Box");  
//        dm.addColumn("MP");  
//        dm.addColumn("Door");  
//        dm.addColumn("Topi");  
//        dm.addColumn("Chasis"); 
        dm.addColumn("Support Fee");
//        dm.addColumn("Mtrial");  
//        dm.addColumn("Colour");  
//        dm.addColumn("Labour");  
        dm.addColumn("Harga Aktual");  
        dm.addColumn("Harga Jual");  
        dm.addColumn("Action");  
        tabelBox.setModel(dm);
        tabelBox.setDefaultRenderer(String.class, new MultiLineCellRenderer());
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, "%"+tfsearch.getText()+"%");
            ps.setString(2, "%"+tfsearch.getText()+"%");
            ps.setString(3, "%"+tfsearch.getText()+"%");
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                dm.addRow(new Object[]{
                    rs.getString("product_no"),
                    rs.getString("description"),
                    rs.getString("specification"),
                    rs.getString("unit"),
                    "1 : "+rs.getString("height")
                        +"\n2 : "+rs.getString("weight")
                        +"\n3 : "+rs.getString("dimension"),
//                    rs.getString("weight"),
//                    rs.getString("dimension"),
                    "1 : "+rs.getString("plus")
                        +"\n2 : "+rs.getString("thickness")
                        +"\n3 : "+rs.getString("berat_jenis"),
//                    rs.getString("plus"),
//                    rs.getString("thickness"),
//                    rs.getString("berat_jenis"),
                    "1 : "+rs.getString("luas_box")+
                        "\n2 : "+rs.getString("luas_mp")+
                        "\n3 : "+rs.getString("luas_door")+
                        "\n4 : "+rs.getString("luas_topi")+
                        "\n5 : "+rs.getString("luas_chasis"),
//                    rs.getString("luas_box"),
//                    rs.getString("luas_mp"),
//                    rs.getString("luas_door"),
//                    rs.getString("luas_topi"),
//                    rs.getString("luas_chasis"),
                    "1 : "+rs.getString("price_material")
                        +"\n2 : "+rs.getString("price_colour")
                        +"\n3 : "+rs.getString("price_labour"),
//                    rs.getString("price_material"),
//                    rs.getString("price_colour"),
//                    rs.getString("price_labour"),
                    rs.getString("act_price"),
                    rs.getString("deal_price"),
                    ""
                });
                
                TableColumn kolom = tabelBox.getColumn("Action");
                kolom.setCellRenderer(new ButtonsRenderer());
                kolom.setCellEditor(new ButtonsEditor(tabelBox));
                
                System.out.println("Tabel Box Master Sukses");
            }
            new AturKolom(tabelBox);
            tabelBox.setRowHeight(100);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel Box Master Gagal");
        }
    }
    
    class ButtonsPanel extends JPanel{
        java.util.List <JButton> buttons = Arrays.asList(
                new JButton("", new ImageIcon(getClass().getResource("/image/rubbish7.png"))), 
                new JButton("", new ImageIcon(getClass().getResource("/image/pencil117.png"))),
                new JButton("", new ImageIcon(getClass().getResource("/image/printer70.png")))
                );
        public ButtonsPanel(){
            super();
            setOpaque(true);
            for(JButton b : buttons){
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                add(b);
            }
        }
    }
    
    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer{

        public ButtonsRenderer(){
            super();
            setName("Table.cellRenderer");
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            setBackground(isSelected?table.getSelectionBackground():table.getBackground());
            return this;
        }
    }
    
    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
        protected transient ChangeEvent changeEvent;
        private final JTable table;
        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                }
            }
            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override public void run() {
                        fireEditingStopped();
                    }
                });
            }
        }
        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            buttons.get(0).setAction(new DeleteAction(table));
            buttons.get(1).setAction(new EditAction(table));
            buttons.get(2).setAction(new PrintAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b: buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            addMouseListener(handler);
        }
        @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }
        @Override public Object getCellEditorValue() {
            return "";
        }

        //Copied from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        //protected transient ChangeEvent changeEvent;
        @Override public boolean isCellEditable(EventObject e) {
            return true;
        }
        @Override public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        @Override public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }
        @Override public void cancelCellEditing() {
            fireEditingCanceled();
        }
        @Override public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }
        @Override public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }
        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                   //if (Objects.isNull(changeEvent)) {
                    if (Objects.equals(i, changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (Objects.equals(i, changeEvent)) {
//                    if (Objects.isNull(changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }
    }
    
    class MultiLineCellRenderer extends JTextArea implements TableCellRenderer {

  public MultiLineCellRenderer() {
    setLineWrap(true);
    setWrapStyleWord(true);
    setOpaque(true);
  }

  //render jadi 2 Line
  public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setFont(table.getFont());
    if (hasFocus) {
      setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
      if (table.isCellEditable(row, column)) {
        setForeground(UIManager.getColor("Table.focusCellForeground"));
        setBackground(UIManager.getColor("Table.focusCellBackground"));
      }
    } else {
      setBorder(new EmptyBorder(1, 2, 1, 2));
    }
    setText((value == null) ? "" : value.toString());
    return this;
  }
}
    
    
    class DeleteAction extends AbstractAction {
        private final JTable table;
        public DeleteAction(JTable table) {
            super("del");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int baris = tabelBox.getSelectedRow();
            int kolom = tabelBox.getSelectedColumn();
            String data = tabelBox.getValueAt(baris, kolom).toString();
            String id = tabelBox.getValueAt(baris, 0).toString();
            String d = tabelBox.getValueAt(baris, 1).toString();
            
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Yakin untuk menghapus data Boc Panel \n"+d, 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
                delete(id);
            }
        }

        private void delete(String id) {
            String sql = "Delete from product_box where product_no=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                createtable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(tabelBox, "Terjadi kesalahan : "+ex);
            }
        }
    }

    class EditAction extends AbstractAction {
        private final JTable table;
        public EditAction(JTable table) {
            super("edt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabelBox.getSelectedRow();
            int kolom = tabelBox.getSelectedColumn();
            String data = tabelBox.getValueAt(baris, kolom).toString();
            String no = tabelBox.getValueAt(baris, 0).toString();
            
            panelboxform frm = new panelboxform(null, true);
            frm.getTfkode().setText(no);
            frm.cari(no);
            frm.getBtnSubmit().setText("Update");
            frm.getBtnSubmit().setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
            frm.getBtnCancel().setIcon(new ImageIcon(getClass().getResource("/image/door9.png")));
            frm.setVisible(true);
            System.out.println(no);
            
        }
    }
    
    class PrintAction extends AbstractAction {
        private final JTable table;

        private PrintAction(JTable table) {
            super("prt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabelBox.getSelectedRow();
            int kolom = tabelBox.getSelectedColumn();
            String data = tabelBox.getValueAt(baris, kolom).toString();
            String no = tabelBox.getValueAt(baris, 0).toString();
            String kurs;
            int cur;
            final JComboBox curr;
            final JTextField tfcurr;
            try {
                PreparedStatement ps = conec.prepareStatement("select distinct price_type as curr from kurs");
                ResultSet rs = ps.executeQuery();
                curr = new JComboBox();
                tfcurr = new JTextField();
                while(rs.next()){
                    curr.addItem(rs.getString("curr"));
                }
                JPanel cr = new JPanel(new GridLayout(0, 2));
                cr.add(new JLabel("Pilih Currency"));
                cr.add(Box.createHorizontalStrut(20));
                cr.add(new JLabel("Currency"));
                cr.add(curr);
                cr.add(tfcurr);
                curr.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String a = curr.getSelectedItem().toString();
                        Calendar kalender = new GregorianCalendar();
                            int thn = kalender.get(Calendar.YEAR);
                            int bln = kalender.get(Calendar.MONTH)+1;
                            String b = String.valueOf(bln);
                            if(b.length()==1){
                                b = "0"+b;
                            }
                            String tgl = String.valueOf(thn)+"-"+b;
                        try {
                            PreparedStatement pr = conec.prepareStatement("select price from kurs where price_type=? and date_start like?");
                            pr.setString(1, a);
                            pr.setString(2, tgl+"%");
                            ResultSet rr = pr.executeQuery();
                            if(rr.next()){
                                tfcurr.setText(rr.getString("price"));
                            }else{
                                tfcurr.setText("1");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(offer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
                int opt_cr = JOptionPane.showConfirmDialog(null, cr, "Change Currency", JOptionPane.OK_CANCEL_OPTION);
                if(opt_cr==JOptionPane.OK_OPTION){
                    cur = Integer.valueOf(tfcurr.getText());
                    kurs=curr.getSelectedItem().toString();
                }else{
                    cur = 1;
                    kurs=curr.getSelectedItem().toString();
                }
                //cetak
                cetak(no, cur, kurs);
            } catch (SQLException ex) {
                Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void cetak(String no, int cur, String kurs) {
            try {
                koneksi kon = new koneksi();
                Connection con = kon.connection();

                Calendar kalender = new GregorianCalendar();
                int thn = kalender.get(Calendar.YEAR);
                int bln = kalender.get(Calendar.MONTH)+1;
                int tgl = kalender.get(Calendar.DATE);
                String prefix = String.valueOf(thn)+String.valueOf(bln)+String.valueOf(tgl);
                //String nama_file = no+" "+String.valueOf(prefix);

                HashMap map = new HashMap();
                map.put("kode", no);
                map.put("cur", cur);
                map.put("kurs", kurs);

                File report = new File("c:/SSM/report/boxreport.jasper");
                JasperReport jasperReport = (JasperReport)JRLoader.loadObject(report);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);

                //JasperViewer.viewReport(jasperPrint,false);
                JRXlsExporter exporter= new JRXlsExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                //exporter.setParameter(JRExporterParameter.IGNORE_PAGE_MARGINS, true);
                //exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);

                exporter.setParameter(JExcelApiExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
                exporter.setParameter(JExcelApiExporterParameter.IGNORE_PAGE_MARGINS,Boolean.TRUE);
                exporter.setParameter(JExcelApiExporterParameter.OFFSET_X, 0);
                exporter.setParameter(JExcelApiExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.SHEET_NAMES, new String[]{"box"});

                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C:/SSM/print/"+no+" "+prefix+".xls");

                exporter.setParameter(JExcelApiExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS, Boolean.TRUE);
                exporter.exportReport();

                //JOptionPane.showMessageDialog(null, "Data perhasil di print ke format Excel. \nOpen C:/SSM/print/"+no+" "+prefix+".xls");
                int option = JOptionPane.showConfirmDialog(null, 
                        "Data berhasil di print ke format Excel. \nOpen File "+no+" "+prefix+".xls?", "Export Excel", JOptionPane.YES_NO_OPTION);
                if(option==JOptionPane.YES_OPTION){
                    try {
                        Desktop.getDesktop().open(new File("C:\\SSM\\print\\"+no+" "+prefix+".xls"));
                    } catch (IOException ex) {
                        Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (JRException ex) {
                Logger.getLogger(panelbox.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
