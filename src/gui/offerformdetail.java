/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.EventObject;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import koneksi.koneksi;
import net.java.balloontip.BalloonTip;

/**
 *
 * @author ika
 */
public class offerformdetail extends javax.swing.JDialog {

    Connection conec;
    public String submit;
    BalloonTip bltot;
    public offerformdetail(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.setTitle("Material Offer - FCM");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        
        setLocationRelativeTo(this);
        conec = new koneksi().connection();
        jButton1.setIcon(new ImageIcon(getClass().getResource("/image/search110.png")));
        btnSave.setIcon(new ImageIcon(getClass().getResource("/image/app1.png")));
        //btnCancel.setIcon(new ImageIcon(getClass().getResource("/image/left-arrow9.png")));
        //numbering();
//        createtable();
        tadetail.setLineWrap(true);
        tadetail.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfkode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfnomor = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfkofeProduct = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tadetail = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tfharga = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfqty = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfdisc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tftotal = new javax.swing.JTextField();
        btnsubmit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabel_02 = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tfkode.setEnabled(false);

        jLabel1.setText("Offer No");

        tfnomor.setEnabled(false);

        jLabel2.setText("Product No");

        tfkofeProduct.setEnabled(false);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tadetail.setColumns(20);
        tadetail.setRows(5);
        jScrollPane1.setViewportView(tadetail);

        jLabel4.setText("Price");

        tfharga.setEnabled(false);

        jLabel3.setText("Qty");

        tfqty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfqtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfqtyKeyTyped(evt);
            }
        });

        jLabel5.setText("Disc");

        tfdisc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfdiscKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfdiscKeyTyped(evt);
            }
        });

        jLabel6.setText("%");

        jLabel7.setText("Total");

        tftotal.setEnabled(false);
        tftotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tftotalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tftotalMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfqty, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfdisc, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addComponent(tfharga)
                    .addComponent(tftotal))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfharga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(tfdisc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tftotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubmitActionPerformed(evt);
            }
        });

        tabel_02.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabel_02);

        btnSave.setText("OK");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnsubmit))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfkode, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfnomor, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(tfkofeProduct))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfkode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfnomor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfkofeProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DetailProduct dp;
        ProductOBJ obj;
        
        JPanel a = new JPanel(new GridLayout(0, 2));
        ButtonGroup grp = new ButtonGroup();
        JLabel jdl = new JLabel("Pilih Product :");
        JLabel satu = new JLabel("1. Product Panel");
        JLabel dua = new JLabel("2. Product Box");
        JLabel tiga = new JLabel("3. Product Free Standing");
        JRadioButton rb1 = new JRadioButton();
        JRadioButton rb2 = new JRadioButton();
        JRadioButton rb3 = new JRadioButton();
        
        grp.add(rb1);
        grp.add(rb2);
        grp.add(rb3);
        
        a.add(jdl);
        a.add(Box.createHorizontalStrut(20));
        a.add(satu);
        a.add(rb1);
        a.add(dua);
        a.add(rb2);
        a.add(tiga);
        a.add(rb3);
        
        int option = JOptionPane.showConfirmDialog(null, a, 
                "Pilih product", JOptionPane.OK_CANCEL_OPTION);
        if(option==JOptionPane.OK_OPTION){
            if(rb1.isSelected()){
                dp = new DetailProduct(null, true);
                dp.tabelPanel();
                dp.setVisible(true);
                obj = dp.getData();
                if(obj != null){
                    tfkofeProduct.setText(obj.getKode());
                    tadetail.setText(obj.getNama());
                    String act = obj.getAct_price();
                    String deal= obj.getDeal_price();
                    change_price(act, deal);
                }
            }
            if(rb2.isSelected()){
                dp = new DetailProduct(null, true);
                dp.tabelBox();
                dp.setVisible(true);
                obj = dp.getData();
                if(obj != null){
                    tfkofeProduct.setText(obj.getKode());
                    tadetail.setText(obj.getNama());
                    String act = obj.getAct_price();
                    String deal= obj.getDeal_price();
                    change_price(act, deal);
                }
            }
            if(rb3.isSelected()){
                dp = new DetailProduct(null, true);
                dp.tabelFreeStanding();
                dp.setVisible(true);
                obj = dp.getData();
                if(obj != null){
                    tfkofeProduct.setText(obj.getKode());
                    tadetail.setText(obj.getNama());
                    String act = obj.getAct_price();
                    String deal= obj.getDeal_price();
                    change_price(act, deal);
                }
            }
            tfqty.requestFocus();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubmitActionPerformed
        if(submit.equals("save")){
            save();
        }
        if(submit.equals("update")){
            update();
        }
        btnsubmit.setIcon(new ImageIcon(getClass().getResource("/image/zoomin.png")));
    }//GEN-LAST:event_btnsubmitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void tfqtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfqtyKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfqtyKeyTyped

    private void tfqtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfqtyKeyReleased
        itung_total();
    }//GEN-LAST:event_tfqtyKeyReleased

    private void tfdiscKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdiscKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfdiscKeyTyped

    private void tfdiscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdiscKeyReleased
        itung_total();
    }//GEN-LAST:event_tfdiscKeyReleased

    private void tftotalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tftotalMouseEntered
        bltot = new BalloonTip(tftotal, "(("+tfharga.getText()+"*"+tfqty.getText()+")-(("+tfharga.getText()+"*"+tfqty.getText()+")*"+tfdisc.getText()+"%))");
    }//GEN-LAST:event_tftotalMouseEntered

    private void tftotalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tftotalMouseExited
        bltot.setVisible(false);
    }//GEN-LAST:event_tftotalMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(offerformdetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(offerformdetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(offerformdetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(offerformdetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                offerformdetail dialog = new offerformdetail(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnsubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tabel_02;
    private javax.swing.JTextArea tadetail;
    private javax.swing.JTextField tfdisc;
    private javax.swing.JTextField tfharga;
    private javax.swing.JTextField tfkode;
    private javax.swing.JTextField tfkofeProduct;
    private javax.swing.JTextField tfnomor;
    private javax.swing.JTextField tfqty;
    private javax.swing.JTextField tftotal;
    // End of variables declaration//GEN-END:variables

    public JTextField getTfdisc() {
        return tfdisc;
    }

    public JTextField getTfharga() {
        return tfharga;
    }

    public JTextField getTfkode() {
        return tfkode;
    }

    public JTextField getTfkofeProduct() {
        return tfkofeProduct;
    }

    public JTextField getTfnomor() {
        return tfnomor;
    }

    public JTextField getTfqty() {
        return tfqty;
    }

    public JTextField getTftotal() {
        return tftotal;
    }

    public JButton getBtnSave() {
        return btnSave;
    }

    public JButton getBtnsubmit() {
        return btnsubmit;
    }
    
    private void change_price(String act, String deal) {
        
        NumberFormat no = NumberFormat.getInstance();
        no.setMaximumFractionDigits(3);
        
        int nominal = Integer.valueOf(act.replace(",", "").replace(".", "").trim());
        int nominal1 = Integer.valueOf(deal.replace(",", "").replace(".", "").trim());
        
        act = no.format(nominal);
        deal = no.format(nominal1);
        
        ButtonGroup grp = new ButtonGroup();
        JPanel pnl = new JPanel(new GridLayout(0, 1));
        JLabel jdl = new JLabel("Change Price");
        pnl.add(jdl);
        JPanel pp = new JPanel(new GridLayout(0, 2));
        JLabel a = new JLabel("Harga Aktual");
        JLabel b = new JLabel("Harga Jual");
        JCheckBox c = new JCheckBox(act);
        JCheckBox d = new JCheckBox(deal);
        
        grp.add(c);
        grp.add(d);
        
        pp.add(a);
        pp.add(b);
        pp.add(c);
        pp.add(d);
        pnl.add(pp);
        
        int opt = JOptionPane.showConfirmDialog(null, 
                pnl, "Change Price", JOptionPane.OK_CANCEL_OPTION);
        if(opt == JOptionPane.OK_OPTION){
            if(c.isSelected()){
                tfharga.setText(act);
            }
            if(d.isSelected()){
                tfharga.setText(deal);
            }
        }
        
    }

    public void createtable(String no){
        String sql = "SELECT * FROM offer_detail "
                + " where offer_no = ? "
                + "ORDER BY id";
        DefaultTableModel a = new DefaultTableModel();
        a.addColumn("Quo No");
        a.addColumn("ID");
        a.addColumn("Product");
        a.addColumn("Unit Price");
        a.addColumn("Qty");
        a.addColumn("Disc");
        a.addColumn("Total");
        a.addColumn("Action");  
        tabel_02.setModel(a);
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, no);
            ResultSet rs=ps.executeQuery();
            while(rs.next()){
                String aa = rs.getString("product_no");
                String produk = cari_produk(aa);
                a.addRow(new Object[]{
                    rs.getString("offer_no"),
                    rs.getString("id"),
                    rs.getString("product_no")+" - "+produk,
                    rs.getString("qty"),
                    rs.getString("unit_price"),
                    rs.getString("discount"),
                    rs.getString("total_price"),
                    ""
                });
                TableColumn kolom = tabel_02.getColumn("Action");
                kolom.setCellRenderer(new offerformdetail.ButtonsRenderer());
                kolom.setCellEditor(new offerformdetail.ButtonsEditor(tabel_02));
//                
//                int rows = tabelCutomer.getRowHeight();
//                tabelCutomer.setRowHeight(30);
                System.out.println("Tabel Customer Sukses");
            }
            new AturKolom(tabel_02);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Tabel Customer Gagal");
        }
    }

    private String cari_produk(String aa) {
        String sql_panel = "select * from product_panel where product_no=?";
        String sql_box = "select * from product_box where product_no=?";
        String sql_freeS = "select * from product_standing where product_no=?";
        String nama = null;
        PreparedStatement ps;
        ResultSet rs;
        try {
           ps  = conec.prepareStatement(sql_panel);
           ps.setString(1, aa);
           rs = ps.executeQuery();
           if(rs.next()){
               nama = rs.getString("description");
               ps.close();
               rs.close();
               return nama;
           }else{
               System.out.println("di panel ga ada, ini lgi nyari di box");
               ps = conec.prepareStatement(sql_box);
               ps.setString(1, aa);
               rs = ps.executeQuery();
               if(rs.next()){
                    nama = rs.getString("description");
                    ps.close();
                    rs.close();
                    return nama;
               }else{
                   System.out.println("di box juga ga ada, ini lgi nyari di free standing");
                   ps = conec.prepareStatement(sql_freeS);
                   ps.setString(1, aa);
                   rs = ps.executeQuery();
                   if(rs.next()){
                        nama = rs.getString("description");
                        ps.close();
                        rs.close();
                        return nama;
                   }else{
                       System.out.println("di free standing juga udah ga ada");
                   }
               }
           }
        } catch (SQLException ex) {
            Logger.getLogger(offerformdetail.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nama;
    }

    private void save() {
        String nomor = tfnomor.getText();
        String id = tfkode.getText();
        String produk = tfkofeProduct.getText();
        String qty = tfqty.getText().replace(",", "");
        String hrg = tfharga.getText().replace(",", "");
        String dsc = tfdisc.getText().replace(",", "");
        String tot = tftotal.getText().replace(",", "");
        
        String cari = "select * from offer_detail where offer_no=? and product_no=?";
        String insert="insert into offer_detail (offer_no, id, product_no, qty, unit_price, discount, total_price) values(?,?,?,?,?,?,?)";
        try {
            PreparedStatement ps = conec.prepareStatement(cari);
            ps.setString(1, nomor);
            ps.setString(2, id);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                int opt = JOptionPane.showConfirmDialog(null, 
                        "Data dengan kode : "+produk+" sudah ada. \n Update?", "Ambigu data", JOptionPane.OK_CANCEL_OPTION);
                if(opt == JOptionPane.OK_OPTION){
                    update();
                }
            }else{
                PreparedStatement st = conec.prepareStatement(insert);
                st.setString(1, nomor);
                st.setString(2, id);
                st.setString(3, produk);
                st.setString(4, qty);
                st.setString(5, hrg);
                st.setString(6, dsc);
                st.setString(7, tot);
                st.executeUpdate();
                
                JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan");
                reset();
                numbering(tfnomor.getText());
                createtable(tfnomor.getText());
                submit="save";
            }
        } catch (SQLException ex) {
            Logger.getLogger(offerformdetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void update (){
        String nomor = tfnomor.getText();
        String id = tfkode.getText();
        String produk = tfkofeProduct.getText();
        String qty = tfqty.getText().replace(",", "");
        String hrg = tfharga.getText().replace(",", "");
        String dsc = tfdisc.getText().replace(",", "");
        String tot = tftotal.getText().replace(",", "");
        
        String cari = "select * from offer_detail where offer_no=? and product_no=?";
        String upd="update offer_detail set "
                + "product_no=?, "
                + "qty=?, "
                + "unit_price=?, "
                + "discount=?, "
                + "total_price=? "
                + "where offer_no=? and id=?";
        try {
            PreparedStatement ps = conec.prepareStatement(cari);
            ps.setString(1, nomor);
            ps.setString(2, id);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                PreparedStatement st = conec.prepareStatement(upd);
                st.setString(1, produk);
                st.setString(2, qty);
                st.setString(3, hrg);
                st.setString(4, dsc);
                st.setString(5, tot);
                st.setString(5, nomor);
                st.setString(7, id);
                st.executeUpdate();
                
                JOptionPane.showMessageDialog(null, "Data berhasil di edit");
                reset();
                numbering(tfnomor.getText());
                createtable(tfnomor.getText());
                submit = "save";
            }else{
                 int opt = JOptionPane.showConfirmDialog(null, 
                        "Data dengan kode : "+produk+" tidak ditemukan.\n Simpan baru?", "Ambigu data", JOptionPane.OK_CANCEL_OPTION);
                if(opt == JOptionPane.OK_OPTION){
                    save();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(offerformdetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void itung_total() {
        String harga, qty, disc;
        if(tfharga.getText().equals("")){
            harga = "0";
        }else{
            harga = tfharga.getText().replace(",", "");
        }
        if(tfqty.getText().equals("")){
            qty = "0";
        }else{
            qty = tfqty.getText().replace(",", "");
        }
        if(tfdisc.getText().equals("")){
            disc = "0";
        }else{
            disc= tfdisc.getText().replace(",", "");
        }
        
        double hrg = Double.valueOf(harga);
        double jml = Double.valueOf(qty);
        double dsc = Double.valueOf(disc);
        
        double tot = Math.round((hrg*jml)-((hrg*jml)*dsc/100));
        int total = (int) tot;
        
        NumberFormat no = NumberFormat.getInstance();
        no.setMaximumFractionDigits(3);
           
        tftotal.setText(String.valueOf(no.format(total)));
        
    }

    private void reset() {
        tfkofeProduct.setText("");
        tadetail.setText("");
        tfharga.setText("");
        tfqty.setText("");
        tfdisc.setText("");
        tftotal.setText("");
    }
    
    class ButtonsPanel extends JPanel{
        List <JButton> buttons = Arrays.asList(
                new JButton("", new ImageIcon(getClass().getResource("/image/rubbish7.png"))), 
                new JButton("", new ImageIcon(getClass().getResource("/image/pencil117.png")))
                );
        public ButtonsPanel(){
            super();
            setOpaque(true);
            for(JButton b : buttons){
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                add(b);
            }
        }
    }
    
    class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer{

        public ButtonsRenderer(){
            super();
            setName("Table.cellRenderer");
        }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            setBackground(isSelected?table.getSelectionBackground():table.getBackground());
            return this;
        }
    }
    
    class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
        protected transient ChangeEvent changeEvent;
        private final JTable table;
        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        setBackground(table.getBackground());
                    }
                }
            }
            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(new Runnable() {
                    @Override public void run() {
                        fireEditingStopped();
                    }
                });
            }
        }
        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            buttons.get(0).setAction(new DeleteAction(table));
            buttons.get(1).setAction(new EditAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b: buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            addMouseListener(handler);
        }
        @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.setBackground(table.getSelectionBackground());
            return this;
        }
        @Override public Object getCellEditorValue() {
            return "";
        }

        //Copied from AbstractCellEditor
        //protected EventListenerList listenerList = new EventListenerList();
        //protected transient ChangeEvent changeEvent;
        @Override public boolean isCellEditable(EventObject e) {
            return true;
        }
        @Override public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        @Override public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }
        @Override public void cancelCellEditing() {
            fireEditingCanceled();
        }
        @Override public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }
        @Override public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }
        public CellEditorListener[] getCellEditorListeners() {
            return listenerList.getListeners(CellEditorListener.class);
        }
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                   //if (Objects.isNull(changeEvent)) {
                    if (Objects.equals(i, changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (Objects.equals(i, changeEvent)) {
//                    if (Objects.isNull(changeEvent)) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }
    }
    
    
    class DeleteAction extends AbstractAction {
        private final JTable table;
        public DeleteAction(JTable table) {
            super("del");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int baris = tabel_02.getSelectedRow();
            int kolom = tabel_02.getSelectedColumn();
            String data = tabel_02.getValueAt(baris, kolom).toString();
            String offer = tabel_02.getValueAt(baris, 0).toString();
            String id = tabel_02.getValueAt(baris, 1).toString();
            
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Yakin untuk menghapus data ini", 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
                delete(id, offer);
            }
        }

        private void delete(String id, String offer) {
            String sql = "Delete from offer_detail where offer_no=? and id=?";
            PreparedStatement ps;
            try {
                ps = conec.prepareStatement(sql);
                ps.setString(1, offer);
                ps.setString(2, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                createtable(tfnomor.getText());
                
                btnsubmit.setIcon(new ImageIcon(getClass().getResource("/image/zoomin.png")));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(tabel_02, "Terjadi kesalahan : "+ex);
            }
        }
    }

    class EditAction extends AbstractAction {
        private final JTable table;
        public EditAction(JTable table) {
            super("edt");
            this.table = table;
        }
        @Override 
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            
            int baris = tabel_02.getSelectedRow();
            int kolom = tabel_02.getSelectedColumn();
            String data = tabel_02.getValueAt(baris, kolom).toString();
            String offer = tabel_02.getValueAt(baris, 0).toString();
            
            String id = tabel_02.getValueAt(baris, 1).toString();
            String kodeproduk = tabel_02.getValueAt(baris, 2).toString();
            int qty = Integer.valueOf(tabel_02.getValueAt(baris, 4).toString());
            int price = Integer.valueOf(tabel_02.getValueAt(baris, 3).toString());
            int disc = Integer.valueOf(tabel_02.getValueAt(baris, 5).toString());
            int tot = Integer.valueOf(tabel_02.getValueAt(baris, 6).toString());
            
            NumberFormat no = NumberFormat.getInstance();
            no.setMaximumFractionDigits(3);
            
            String[] produk = kodeproduk.split(" - ");
            
            tfkode.setText(id);
            tfkofeProduct.setText(produk[0]);
            tadetail.setText(produk[1]);
            tfharga.setText(String.valueOf(no.format(price)));
            tfqty.setText(String.valueOf(no.format(qty)));
            tfdisc.setText(String.valueOf(no.format(disc)));
            tftotal.setText(String.valueOf(no.format(tot)));
            btnsubmit.setIcon(new ImageIcon(getClass().getResource("/image/refresh65.png")));
            submit = "update";
        }
    }
    public void numbering(String kode) {
        //String kode = tfnomor.getText();
        String sql = "select id from offer_detail where offer_no=? order by id desc";
        try {
            PreparedStatement ps = conec.prepareStatement(sql);
            ps.setString(1, kode);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                String a = rs.getString("id");
                int b = Integer.valueOf(a)+1;
                tfkode.setText(String.valueOf(b));
                System.out.println("ada yg di ambil");
            }else{
                tfkode.setText("1");
                System.out.println("kosong yg diambil");
            }
        } catch (SQLException ex) {
            Logger.getLogger(offerformdetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
