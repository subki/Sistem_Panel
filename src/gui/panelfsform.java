/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.alee.laf.text.WebTextField;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import koneksi.koneksi;
import org.jdesktop.swingx.HorizontalLayout;

/**
 *
 * @author ika
 */
public class panelfsform extends javax.swing.JDialog {

    Connection conec;
    String par1, par2, par3, par4, par5, par6, par7, par8, par9, par10, par11,
                par12, par13, par14, par15, par16, par17, par18, par19, par20,
            par21, par22, par23, par24, par25, par26, par27, par28, par29, par30,
            par31, par32, par33, par34, par35, par36, par37, par38, par39, par40;
        
    public panelfsform(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        setLocationRelativeTo(this);
        this.setTitle("Input Data Box Panel Free Standing");
        this.setIconImage(new ImageIcon(getClass().getResource("/image/ssm.png")).getImage());
        conec = new koneksi().connection();
        tadeskrip.setLineWrap(true);
        tadeskrip.setWrapStyleWord(true);
        taspek.setLineWrap(true);
        taspek.setWrapStyleWord(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfkode = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnSubmit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taspek = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tadeskrip = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        cbunit = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        tfheight = new javax.swing.JTextField();
        tfweight = new javax.swing.JTextField();
        tfdimension = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        tfplus = new javax.swing.JTextField();
        tfthicknes = new javax.swing.JTextField();
        tfbrtjenis = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        tfmaterial = new javax.swing.JTextField();
        tfcolour = new javax.swing.JTextField();
        tflabour = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfunp = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tfA = new javax.swing.JTextField();
        tfB = new javax.swing.JTextField();
        tfC = new javax.swing.JTextField();
        tfD = new javax.swing.JTextField();
        tfE = new javax.swing.JTextField();
        tfF = new javax.swing.JTextField();
        tfG = new javax.swing.JTextField();
        tfH = new javax.swing.JTextField();
        tfI = new javax.swing.JTextField();
        tfupdown = new javax.swing.JTextField();
        tfrear = new javax.swing.JTextField();
        tfside = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel18 = new javax.swing.JLabel();
        tftotberat = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        tfaktual = new javax.swing.JTextField();
        tfjual = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        cekunp = new javax.swing.JCheckBox();
        cekA = new javax.swing.JCheckBox();
        cekB = new javax.swing.JCheckBox();
        cekC = new javax.swing.JCheckBox();
        cekD = new javax.swing.JCheckBox();
        cekE = new javax.swing.JCheckBox();
        cekF = new javax.swing.JCheckBox();
        cekG = new javax.swing.JCheckBox();
        cekH = new javax.swing.JCheckBox();
        cekI = new javax.swing.JCheckBox();
        cekupdown = new javax.swing.JCheckBox();
        cekrear = new javax.swing.JCheckBox();
        cekside = new javax.swing.JCheckBox();
        cekAll = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Title Box"));

        jLabel1.setText("Kode Produk");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Action"));

        btnSubmit.setText("jButton2");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubmit)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Spesifikasi");

        jLabel3.setText("Deskripsi");

        taspek.setColumns(20);
        taspek.setRows(5);
        jScrollPane1.setViewportView(taspek);

        tadeskrip.setColumns(20);
        tadeskrip.setRows(5);
        jScrollPane2.setViewportView(tadeskrip);

        jLabel4.setText("Satuan");

        cbunit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".:: Pilih Unit ::.", "Pcs", "Box", "Set", "Kg", "Meter" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbunit, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfkode, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfkode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbunit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Detail Box"));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Main"));

        jButton1.setText("proses");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel21.setText("Height");

        tfheight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfheightKeyTyped(evt);
            }
        });

        tfweight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfweightKeyTyped(evt);
            }
        });

        tfdimension.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfdimensionKeyTyped(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("SIZE");

        jLabel23.setText("Weight");

        jLabel24.setText("Dimension");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("ADDITIONAL");

        jLabel26.setText("Plus");

        tfplus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfplusKeyTyped(evt);
            }
        });

        tfthicknes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfthicknesKeyTyped(evt);
            }
        });

        jLabel27.setText("Thickness");

        jLabel28.setText("Berat Jenis");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("SUPPORT FEE / KG");

        jLabel30.setText("Material");

        tfmaterial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfmaterialKeyTyped(evt);
            }
        });

        tfcolour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfcolourKeyTyped(evt);
            }
        });

        tflabour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tflabourKeyTyped(evt);
            }
        });

        jLabel31.setText("Colour");

        jLabel32.setText("Labour");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(tfheight, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfweight, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(tfdimension, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfplus, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfthicknes, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(tfbrtjenis, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfmaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfcolour, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel31))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(tflabour, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel21))
                        .addGap(0, 23, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfheight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdimension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfthicknes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfbrtjenis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfmaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfcolour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tflabour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Sub Main"));

        jLabel5.setText("Base UNP");

        tfunp.setEnabled(false);

        jLabel6.setText("Berat Support A");

        jLabel7.setText("Berat Support B");

        jLabel8.setText("Berat Support C");

        jLabel9.setText("Berat Support D");

        jLabel10.setText("Berat Support E");

        jLabel11.setText("Berat Support F");

        jLabel12.setText("Berat Support G");

        jLabel13.setText("Berat Support H");

        jLabel14.setText("Berat Support I");

        jLabel15.setText("Cover Up Down");

        jLabel16.setText("Door Rear");

        jLabel17.setText("Cover Side");

        tfA.setEnabled(false);

        tfB.setEnabled(false);

        tfC.setEnabled(false);

        tfD.setEnabled(false);

        tfE.setEnabled(false);

        tfF.setEnabled(false);

        tfG.setEnabled(false);

        tfH.setEnabled(false);

        tfI.setEnabled(false);

        tfupdown.setEnabled(false);

        tfrear.setEnabled(false);

        tfside.setEnabled(false);

        jLabel18.setText("Berat");

        tftotberat.setEnabled(false);

        jLabel19.setText("Harga Aktual");

        tfaktual.setEnabled(false);

        tfjual.setEnabled(false);

        jLabel20.setText("Harga Jual");

        cekunp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekunpActionPerformed(evt);
            }
        });

        cekA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekAActionPerformed(evt);
            }
        });

        cekB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekBActionPerformed(evt);
            }
        });

        cekC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekCActionPerformed(evt);
            }
        });

        cekD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekDActionPerformed(evt);
            }
        });

        cekE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekEActionPerformed(evt);
            }
        });

        cekF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekFActionPerformed(evt);
            }
        });

        cekG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekGActionPerformed(evt);
            }
        });

        cekH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekHActionPerformed(evt);
            }
        });

        cekI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekIActionPerformed(evt);
            }
        });

        cekupdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekupdownActionPerformed(evt);
            }
        });

        cekrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekrearActionPerformed(evt);
            }
        });

        cekside.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceksideActionPerformed(evt);
            }
        });

        cekAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekAllActionPerformed(evt);
            }
        });

        jLabel33.setText("Select All");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfA, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfC, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfD, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfE, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekG)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfG, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfH, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekI)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfI, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekupdown)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfupdown, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekrear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfrear, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekside)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfside, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tftotberat, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfaktual, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(tfjual, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cekunp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfunp, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(cekAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel33)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cekAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(tfunp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cekunp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(tfB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel8)
                                            .addComponent(tfC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel9)
                                                    .addComponent(tfD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel10)
                                                            .addComponent(tfE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                    .addComponent(jLabel11)
                                                                    .addComponent(tfF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                            .addComponent(jLabel12)
                                                                            .addComponent(tfG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGap(10, 10, 10)
                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                    .addComponent(jLabel13)
                                                                                    .addComponent(tfH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                            .addComponent(jLabel14)
                                                                                            .addComponent(tfI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                                .addComponent(jLabel15)
                                                                                                .addComponent(tfupdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                            .addComponent(cekupdown))
                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                                    .addComponent(jLabel16)
                                                                                                    .addComponent(tfrear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                                            .addComponent(jLabel17)
                                                                                                            .addComponent(tfside, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                    .addComponent(cekside)))
                                                                                            .addComponent(cekrear)))
                                                                                    .addComponent(cekI)))
                                                                            .addComponent(cekH))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                            .addComponent(jLabel18)
                                                                            .addComponent(tftotberat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                            .addComponent(jLabel19)
                                                                            .addComponent(jLabel20))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                            .addComponent(tfaktual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                            .addComponent(tfjual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                    .addComponent(cekG)))
                                                            .addComponent(cekF)))
                                                    .addComponent(cekE)))
                                            .addComponent(cekD)))
                                    .addComponent(cekC)))
                            .addComponent(cekB)))
                    .addComponent(cekA))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel4);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfheightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfheightKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfheightKeyTyped

    private void tfweightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfweightKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfweightKeyTyped

    private void tfdimensionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdimensionKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfdimensionKeyTyped

    private void tfplusKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfplusKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfplusKeyTyped

    private void tfthicknesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfthicknesKeyTyped
//        char c = evt.getKeyChar();
//        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
//            evt.consume();
//        }
    }//GEN-LAST:event_tfthicknesKeyTyped

    private void tfmaterialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfmaterialKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfmaterialKeyTyped

    private void tfcolourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfcolourKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tfcolourKeyTyped

    private void tflabourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tflabourKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
            evt.consume();
        }
    }//GEN-LAST:event_tflabourKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        prosesHitung();
        falseddetail();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cekunpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekunpActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekunpActionPerformed

    private void cekAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekAllActionPerformed
        if(cekAll.isSelected()){
            cekunp.setSelected(true);
            cekA.setSelected(true);
            cekB.setSelected(true);
            cekC.setSelected(true);
            cekD.setSelected(true);
            cekE.setSelected(true);
            cekF.setSelected(true);
            cekG.setSelected(true);
            cekH.setSelected(true);
            cekI.setSelected(true);
            cekupdown.setSelected(true);
            cekrear.setSelected(true);
            cekside.setSelected(true);
        }else{
            cekunp.setSelected(false);
            cekA.setSelected(false);
            cekB.setSelected(false);
            cekC.setSelected(false);
            cekD.setSelected(false);
            cekE.setSelected(false);
            cekF.setSelected(false);
            cekG.setSelected(false);
            cekH.setSelected(false);
            cekI.setSelected(false);
            cekupdown.setSelected(false);
            cekrear.setSelected(false);
            cekside.setSelected(false);
        }
        hitung_semua();
    }//GEN-LAST:event_cekAllActionPerformed

    private void cekAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekAActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekAActionPerformed

    private void cekBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekBActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekBActionPerformed

    private void cekCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekCActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekCActionPerformed

    private void cekDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekDActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekDActionPerformed

    private void cekEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekEActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekEActionPerformed

    private void cekFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekFActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekFActionPerformed

    private void cekGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekGActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekGActionPerformed

    private void cekHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekHActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekHActionPerformed

    private void cekIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekIActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekIActionPerformed

    private void cekupdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekupdownActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekupdownActionPerformed

    private void cekrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekrearActionPerformed
        hitung_semua();
    }//GEN-LAST:event_cekrearActionPerformed

    private void ceksideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceksideActionPerformed
        hitung_semua();
    }//GEN-LAST:event_ceksideActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        if(btnSubmit.getText().equals("Save")){
            save();
        }
        if(btnSubmit.getText().equals("Update")){
            update();
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelfsform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelfsform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelfsform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelfsform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                panelfsform dialog = new panelfsform(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbunit;
    private javax.swing.JCheckBox cekA;
    private javax.swing.JCheckBox cekAll;
    private javax.swing.JCheckBox cekB;
    private javax.swing.JCheckBox cekC;
    private javax.swing.JCheckBox cekD;
    private javax.swing.JCheckBox cekE;
    private javax.swing.JCheckBox cekF;
    private javax.swing.JCheckBox cekG;
    private javax.swing.JCheckBox cekH;
    private javax.swing.JCheckBox cekI;
    private javax.swing.JCheckBox cekrear;
    private javax.swing.JCheckBox cekside;
    private javax.swing.JCheckBox cekunp;
    private javax.swing.JCheckBox cekupdown;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextArea tadeskrip;
    private javax.swing.JTextArea taspek;
    private javax.swing.JTextField tfA;
    private javax.swing.JTextField tfB;
    private javax.swing.JTextField tfC;
    private javax.swing.JTextField tfD;
    private javax.swing.JTextField tfE;
    private javax.swing.JTextField tfF;
    private javax.swing.JTextField tfG;
    private javax.swing.JTextField tfH;
    private javax.swing.JTextField tfI;
    private javax.swing.JTextField tfaktual;
    private javax.swing.JTextField tfbrtjenis;
    private javax.swing.JTextField tfcolour;
    private javax.swing.JTextField tfdimension;
    private javax.swing.JTextField tfheight;
    private javax.swing.JTextField tfjual;
    private javax.swing.JTextField tfkode;
    private javax.swing.JTextField tflabour;
    private javax.swing.JTextField tfmaterial;
    private javax.swing.JTextField tfplus;
    private javax.swing.JTextField tfrear;
    private javax.swing.JTextField tfside;
    private javax.swing.JTextField tfthicknes;
    private javax.swing.JTextField tftotberat;
    private javax.swing.JTextField tfunp;
    private javax.swing.JTextField tfupdown;
    private javax.swing.JTextField tfweight;
    // End of variables declaration//GEN-END:variables

    public JTextField getTfkode() {
        return tfkode;
    }

    public JButton getBtnCancel() {
        return btnCancel;
    }

    public JButton getBtnSubmit() {
        return btnSubmit;
    }
    
    public void reset(){
        tfkode.setText("");
        taspek.setText("");
        tadeskrip.setText("");
        cbunit.setSelectedIndex(0);
        tfheight.setText("");
        tfweight.setText("");
        tfdimension.setText("");
        tfplus.setText("");
        tfthicknes.setText("");
        tfbrtjenis.setText("");
        tfmaterial.setText("");
        tfcolour.setText("");
        tflabour.setText("");
        //itung
        tfaktual.setText("0");
        tfjual.setText("0");
    }
    private void prosesHitung() {
       
        final WebTextField v1 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v2 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v3 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v4 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v5 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v6 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v7 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v8 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v9 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v10 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v11 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v12 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v13 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v14 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v15 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v16 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v17 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v18 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v19 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v20 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v21 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v22 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v23 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v24 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v25 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v26 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v27 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v28 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v29 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v30 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v31 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v32 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v33 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v34 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v35 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v36 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v37 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v38 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v39 = new com.alee.laf.text.WebTextField(10);
        final WebTextField v40 = new com.alee.laf.text.WebTextField(10);

        v1.setFont(new java.awt.Font("Tahoma", 0, 12));
        v2.setFont(new java.awt.Font("Tahoma", 0, 12));
        v3.setFont(new java.awt.Font("Tahoma", 0, 12));
        v4.setFont(new java.awt.Font("Tahoma", 0, 12));
        v5.setFont(new java.awt.Font("Tahoma", 0, 12));
        v6.setFont(new java.awt.Font("Tahoma", 0, 12));
        v7.setFont(new java.awt.Font("Tahoma", 0, 12));
        v8.setFont(new java.awt.Font("Tahoma", 0, 12));
        v9.setFont(new java.awt.Font("Tahoma", 0, 12));
        v10.setFont(new java.awt.Font("Tahoma", 0, 12));
        v11.setFont(new java.awt.Font("Tahoma", 0, 12));
        v12.setFont(new java.awt.Font("Tahoma", 0, 12));
        v13.setFont(new java.awt.Font("Tahoma", 0, 12));
        v14.setFont(new java.awt.Font("Tahoma", 0, 12));
        v15.setFont(new java.awt.Font("Tahoma", 0, 12));
        v16.setFont(new java.awt.Font("Tahoma", 0, 12));
        v17.setFont(new java.awt.Font("Tahoma", 0, 12));
        v18.setFont(new java.awt.Font("Tahoma", 0, 12));
        v19.setFont(new java.awt.Font("Tahoma", 0, 12));
        v20.setFont(new java.awt.Font("Tahoma", 0, 12));
        v21.setFont(new java.awt.Font("Tahoma", 0, 12));
        v22.setFont(new java.awt.Font("Tahoma", 0, 12));
        v23.setFont(new java.awt.Font("Tahoma", 0, 12));
        v24.setFont(new java.awt.Font("Tahoma", 0, 12));
        v25.setFont(new java.awt.Font("Tahoma", 0, 12));
        v26.setFont(new java.awt.Font("Tahoma", 0, 12));
        v27.setFont(new java.awt.Font("Tahoma", 0, 12));
        v28.setFont(new java.awt.Font("Tahoma", 0, 12));
        v29.setFont(new java.awt.Font("Tahoma", 0, 12));
        v30.setFont(new java.awt.Font("Tahoma", 0, 12));
        v31.setFont(new java.awt.Font("Tahoma", 0, 12));
        v32.setFont(new java.awt.Font("Tahoma", 0, 12));
        v33.setFont(new java.awt.Font("Tahoma", 0, 12));
        v34.setFont(new java.awt.Font("Tahoma", 0, 12));
        v35.setFont(new java.awt.Font("Tahoma", 0, 12));
        v36.setFont(new java.awt.Font("Tahoma", 0, 12));
        v37.setFont(new java.awt.Font("Tahoma", 0, 12));
        v38.setFont(new java.awt.Font("Tahoma", 0, 12));
        v39.setFont(new java.awt.Font("Tahoma", 0, 12));
        v40.setFont(new java.awt.Font("Tahoma", 0, 12));
        
        v1.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par1 = v1.getText();
            }
        });

        v2.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par2 = v2.getText();
            }
        });

        v3.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par3 = v3.getText();
            }
        });

        v4.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par4 = v4.getText();
            }
        });

        v5.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par5 = v5.getText();
            }
        });

        v6.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par6 = v6.getText();
            }
        });

        v7.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par7 = v7.getText();
            }
        });

        v8.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par8 = v8.getText();
            }
        });

        v9.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par9 = v9.getText();
            }
        });

        v10.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par10 = v10.getText();
            }
        });

        v11.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par11 = v11.getText();
            }
        });

        v12.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par12 = v12.getText();
            }
        });

        v13.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par13 = v13.getText();
            }
        });

        v14.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par14 = v14.getText();
            }
        });

        v15.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par15 = v15.getText();
            }
        });

        v16.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par16 = v16.getText();
            }
        });

        v17.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par17 = v17.getText();
            }
        });

        v18.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par18 = v18.getText();
            }
        });

        v19.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par19 = v19.getText();
            }
        });

        v20.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par20 = v20.getText();
            }
        });

        v21.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par21 = v21.getText();
            }
        });

        v22.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par22 = v22.getText();
            }
        });

        v23.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par23 = v23.getText();
            }
        });

        v24.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par24 = v24.getText();
            }
        });

        v25.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par25 = v25.getText();
            }
        });

        v26.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par26 = v26.getText();
            }
        });

        v27.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par27 = v27.getText();
            }
        });

        v28.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par28 = v28.getText();
            }
        });

        v29.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par29 = v29.getText();
            }
        });

        v30.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par30 = v30.getText();
            }
        });

        v31.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par31 = v31.getText();
            }
        });

        v32.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par32 = v32.getText();
            }
        });

        v33.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par33 = v33.getText();
            }
        });

        v34.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par34 = v34.getText();
            }
        });

        v35.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par35 = v35.getText();
            }
        });

        v36.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par36 = v36.getText();
            }
        });

        v37.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par37 = v37.getText();
            }
        });

        v38.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par38 = v38.getText();
            }
        });

        v39.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par39 = v39.getText();
            }
        });

        v40.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if(!((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)))){
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                par40 = v40.getText();
            }
        });

        v1.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v1.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v1.setText(par1);
            }
        });

        v2.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v2.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v2.setText(par2);
            }
        });

        v3.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v3.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v3.setText(par3);
            }
        });

        v4.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v4.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v4.setText(par4);
            }
        });

        v5.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v5.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v5.setText(par5);
            }
        });

        v6.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v6.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v6.setText(par6);
            }
        });

        v7.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v7.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v7.setText(par7);
            }
        });

        v8.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v8.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v8.setText(par8);
            }
        });

        v9.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v9.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v9.setText(par9);
            }
        });

        v10.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v1.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v10.setText(par10);
            }
        });

        v11.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v11.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v11.setText(par11);
            }
        });

        v12.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v12.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v12.setText(par12);
            }
        });

        v13.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v13.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v13.setText(par13);
            }
        });

        v14.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v14.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v14.setText(par14);
            }
        });

        v15.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v15.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v15.setText(par15);
            }
        });

        v16.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v16.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v16.setText(par16);
            }
        });

        v17.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v17.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v17.setText(par17);
            }
        });

        v18.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v18.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v18.setText(par18);
            }
        });

        v19.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v19.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v19.setText(par19);
            }
        });

        v20.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v20.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v20.setText(par20);
            }
        });
    
        v21.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v21.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v21.setText(par21);
            }
        });
    
        v22.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v22.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v22.setText(par22);
            }
        });
    
        v23.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v23.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v23.setText(par23);
            }
        });
    
        v24.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v24.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v24.setText(par24);
            }
        });
    
        v25.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v25.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v25.setText(par25);
            }
        });
    
        v26.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v26.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v26.setText(par26);
            }
        });
    
        v27.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v27.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v27.setText(par27);
            }
        });
    
        v28.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v28.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v28.setText(par28);
            }
        });
    
        v29.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v29.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v29.setText(par29);
            }
        });
    
        v30.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v30.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v30.setText(par30);
            }
        });
    
        v31.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v31.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v31.setText(par31);
            }
        });
    
        v32.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v32.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v32.setText(par32);
            }
        });
    
        v33.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v33.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v33.setText(par33);
            }
        });
    
        v34.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v34.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v34.setText(par34);
            }
        });
    
        v35.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v35.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v35.setText(par35);
            }
        });
    
        v36.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v36.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v36.setText(par36);
            }
        });
    
        v37.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v37.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v37.setText(par37);
            }
        });
    
        v38.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v38.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v38.setText(par38);
            }
        });
    
        v39.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v39.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v39.setText(par39);
            }
        });
    
        v40.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                v40.setText("");
            }

            @Override
            public void focusLost(FocusEvent e) {
                v40.setText(par40);
            }
        });
    
        //berat UNP v1, v2, v3
        JPanel unp = new JPanel(new GridLayout(0, 2));
        unp.add(new JLabel("Default :"));           unp.add(Box.createHorizontalStrut(20));
        unp.add(new JLabel("Tinggi Plat : 100"));   unp.add(new JLabel("Lebar Plat : 50+50"));
        unp.add(new JLabel("Tebal Plat : 5"));      unp.add(Box.createHorizontalStrut(20));
        v1.setText("100"); v2.setText("50"); v3.setText("5");
        unp.add(new JSeparator());              unp.add(new JSeparator());
        unp.add(new JLabel("Tinggi Plat"));     unp.add(v1);
        unp.add(new JLabel("Lebar Plat"));      unp.add(v2);
        unp.add(new JLabel("Tebal Plat"));      unp.add(v3);
        
        int unp_opt = JOptionPane.showConfirmDialog(null, unp, "Input Kalkulasi Base UNP", JOptionPane.OK_CANCEL_OPTION);
        if(unp_opt == JOptionPane.OK_OPTION){
            par1 = v1.getText();
            par2 = v2.getText();
            par3 = v3.getText();
            v1.setText("");
            v2.setText("");
            v3.setText("");
        }
        
        //berat Support A v6, v7, v8, v9
        JPanel sa = new JPanel(new GridLayout(0,2));
        sa.add(new JLabel("Default :")); sa.add(Box.createHorizontalStrut(20));
        sa.add(new JLabel("Tinggi Plat : 80"));     sa.add(new JLabel("Lebar Plat : 40+40"));
        sa.add(new JLabel("Tekukan Plat : 15+15")); sa.add(new JLabel("Jumlah Plat : 8"));
        v6.setText("80"); v7.setText("40"); v8.setText("15"); v9.setText("8");
        sa.add(new JSeparator());           sa.add(new JSeparator());
        sa.add(new JLabel("Tinggi Plat"));  sa.add(v6);
        sa.add(new JLabel("Lebar Plat"));   sa.add(v7);
        sa.add(new JLabel("Tekukan Plat")); sa.add(v8);
        sa.add(new JLabel("Jumlah Plat"));  sa.add(v9);
        int sa_opt = JOptionPane.showConfirmDialog(null, sa, "Input Kalkulasi Support A", JOptionPane.OK_CANCEL_OPTION);
        if(sa_opt==JOptionPane.OK_OPTION){
            par6 = v6.getText(); v6.setText("");
            par7 = v7.getText(); v7.setText("");
            par8 = v8.getText(); v8.setText("");
            par9 = v9.getText(); v9.setText("");
        }
        
        //berat Support B v10, v11, v12
        JPanel sb = new JPanel(new GridLayout(0,2));
        sb.add(new JLabel("Default :")); sb.add(Box.createHorizontalStrut(20));
        sb.add(new JLabel("Tinggi Plat : 50")); sb.add(new JLabel("Lebar Plat : 40+40"));
        sb.add(new JLabel("Jumlah Plat : 4"));  sb.add(Box.createHorizontalStrut(20));
        v10.setText("50"); v11.setText("40"); v12.setText("4");
        sb.add(new JSeparator());           sb.add(new JSeparator());
        sb.add(new JLabel("Tinggi Plat"));  sb.add(v10);
        sb.add(new JLabel("Lebar Plat"));   sb.add(v11);
        sb.add(new JLabel("Jumlah Plat"));  sb.add(v12);
        int sb_opt = JOptionPane.showConfirmDialog(null, sb, "Input Kalkulasi Support B", JOptionPane.OK_CANCEL_OPTION);
        if(sb_opt==JOptionPane.OK_OPTION){
            par10 = v10.getText(); v10.setText("");
            par11 = v11.getText(); v11.setText("");
            par12 = v12.getText(); v12.setText("");
        }
        
        //berat Support C v13, v14, v15, v16
        JPanel sc = new JPanel(new GridLayout(0,2));
        sc.add(new JLabel("Default :")); sc.add(Box.createHorizontalStrut(20));
        sc.add(new JLabel("Tinggi Plat 1 : 50"));   sc.add(new JLabel("Lebar Plat : 40"));
        sc.add(new JLabel("Tinggi Plat 2 : 30"));   sc.add(new JLabel("Jumlah Plat : 8"));
        v13.setText("50"); v14.setText("40"); v15.setText("30"); v16.setText("8");
        sc.add(new JSeparator());           sc.add(new JSeparator());
        sc.add(new JLabel("Tinggi Plat 1"));  sc.add(v13);
        sc.add(new JLabel("Lebar Plat"));   sc.add(v14);
        sc.add(new JLabel("Tinggi Plat 2")); sc.add(v15);
        sc.add(new JLabel("Jumlah Plat"));  sc.add(v16);
        int sc_opt = JOptionPane.showConfirmDialog(null, sc, "Input Kalkulasi Support C", JOptionPane.OK_CANCEL_OPTION);
        if(sc_opt==JOptionPane.OK_OPTION){
            par13 = v13.getText(); v13.setText("");
            par14 = v14.getText(); v14.setText("");
            par15 = v15.getText(); v15.setText("");
            par16 = v16.getText(); v16.setText("");
        }
        
        //berat Support D v17, v18, v19, v20
        JPanel sd = new JPanel(new GridLayout(0,2));
        sd.add(new JLabel("Default :")); sd.add(Box.createHorizontalStrut(20));
        sd.add(new JLabel("Tinggi Plat : 40"));   sd.add(new JLabel("Lebar Plat : 40"));
        sd.add(new JLabel("Tebal Plat : 5"));   sd.add(new JLabel("Jumlah Plat : 2"));
        v17.setText("40"); v18.setText("40"); v19.setText("5"); v20.setText("2");
        sd.add(new JSeparator());           sd.add(new JSeparator());
        sd.add(new JLabel("Tinggi Plat"));  sd.add(v17);
        sd.add(new JLabel("Lebar Plat"));   sd.add(v18);
        sd.add(new JLabel("Tebal Plat")); sd.add(v19);
        sd.add(new JLabel("Jumlah Plat"));  sd.add(v20);
        int sd_opt = JOptionPane.showConfirmDialog(null, sd, "Input Kalkulasi Support D", JOptionPane.OK_CANCEL_OPTION);
        if(sd_opt==JOptionPane.OK_OPTION){
            par17 = v17.getText(); v17.setText("");
            par18 = v18.getText(); v18.setText("");
            par19 = v19.getText(); v19.setText("");
            par20 = v20.getText(); v20.setText("");
        }
        
        //berat Support E v21, v22, v23
        JPanel se = new JPanel(new GridLayout(0,2));
        se.add(new JLabel("Default :")); se.add(Box.createHorizontalStrut(20));
        se.add(new JLabel("Tinggi Plat : 50")); se.add(new JLabel("Lebar Plat : 40+40"));
        se.add(new JLabel("Jumlah Plat : 2"));  se.add(Box.createHorizontalStrut(20));
        v21.setText("50"); v22.setText("40"); v23.setText("2");
        se.add(new JSeparator());           se.add(new JSeparator());
        se.add(new JLabel("Tinggi Plat"));  se.add(v21);
        se.add(new JLabel("Lebar Plat"));   se.add(v22);
        se.add(new JLabel("Jumlah Plat"));  se.add(v23);
        int se_opt = JOptionPane.showConfirmDialog(null, se, "Input Kalkulasi Support E", JOptionPane.OK_CANCEL_OPTION);
        if(se_opt==JOptionPane.OK_OPTION){
            par21 = v21.getText(); v21.setText("");
            par22 = v22.getText(); v22.setText("");
            par23 = v23.getText(); v23.setText("");
        }
         
        //berat Support F v24, v25, v26
        JPanel sf = new JPanel(new GridLayout(0,2));
        sf.add(new JLabel("Default :")); sf.add(Box.createHorizontalStrut(20));
        sf.add(new JLabel("Tinggi Plat : 70")); sf.add(new JLabel("Lebar Plat : 20+20"));
        sf.add(new JLabel("Tekukan Plat : 15+15"));  sf.add(Box.createHorizontalStrut(20));
        v24.setText("70"); v25.setText("20"); v26.setText("15");
        sf.add(new JSeparator());           sf.add(new JSeparator());
        sf.add(new JLabel("Tinggi Plat"));  sf.add(v24);
        sf.add(new JLabel("Lebar Plat"));   sf.add(v25);
        sf.add(new JLabel("Tekukan Plat"));  sf.add(v26);
        int sf_opt = JOptionPane.showConfirmDialog(null, sf, "Input Kalkulasi Support F", JOptionPane.OK_CANCEL_OPTION);
        if(sf_opt==JOptionPane.OK_OPTION){
            par24 = v24.getText(); v24.setText("");
            par25 = v25.getText(); v25.setText("");
            par26 = v26.getText(); v26.setText("");
        }
        
        //berat Support G v27, v28, v29, v30
        JPanel sg = new JPanel(new GridLayout(0,2));
        sg.add(new JLabel("Default :")); sg.add(Box.createHorizontalStrut(20));
        sg.add(new JLabel("Tinggi Plat 1 : 50"));   sg.add(new JLabel("Lebar Plat : 40"));
        sg.add(new JLabel("Tinggi Plat 2 : 15"));   sg.add(new JLabel("Jumlah Plat : 2"));
        v27.setText("50"); v28.setText("40"); v29.setText("15"); v30.setText("2");
        sg.add(new JSeparator());           sg.add(new JSeparator());
        sg.add(new JLabel("Tinggi Plat 1"));  sg.add(v27);
        sg.add(new JLabel("Lebar Plat"));   sg.add(v28);
        sg.add(new JLabel("Tinggi Plat 2")); sg.add(v29);
        sg.add(new JLabel("Jumlah Plat"));  sg.add(v30);
        int sg_opt = JOptionPane.showConfirmDialog(null, sg, "Input Kalkulasi Support G", JOptionPane.OK_CANCEL_OPTION);
        if(sg_opt==JOptionPane.OK_OPTION){
            par27 = v27.getText(); v27.setText("");
            par28 = v28.getText(); v28.setText("");
            par29 = v29.getText(); v29.setText("");
            par30 = v30.getText(); v30.setText("");
        }
        
        //berat Support H v31, v32, v33, v34
        JPanel sh = new JPanel(new GridLayout(0,2));
        sh.add(new JLabel("Default :")); sh.add(Box.createHorizontalStrut(20));
        sh.add(new JLabel("Tinggi Plat 1 : 40"));   sh.add(new JLabel("Lebar Plat : 40"));
        sh.add(new JLabel("Tinggi Plat 2 : 15"));   sh.add(new JLabel("Jumlah Plat : 2"));
        v31.setText("40"); v32.setText("40"); v33.setText("15"); v34.setText("2");
        sh.add(new JSeparator());           sh.add(new JSeparator());
        sh.add(new JLabel("Tinggi Plat 1"));  sh.add(v31);
        sh.add(new JLabel("Lebar Plat"));   sh.add(v32);
        sh.add(new JLabel("Tinggi Plat 2")); sh.add(v33);
        sh.add(new JLabel("Jumlah Plat"));  sh.add(v34);
        int sh_opt = JOptionPane.showConfirmDialog(null, sh, "Input Kalkulasi Support H", JOptionPane.OK_CANCEL_OPTION);
        if(sh_opt==JOptionPane.OK_OPTION){
            par31 = v31.getText(); v31.setText("");
            par32 = v32.getText(); v32.setText("");
            par33 = v33.getText(); v33.setText("");
            par34 = v34.getText(); v34.setText("");
        }
        
        //berat Support I v35, v36, v37, v38
        JPanel si = new JPanel(new GridLayout(0,2));
        si.add(new JLabel("Default :")); si.add(Box.createHorizontalStrut(20));
        si.add(new JLabel("Tinggi Plat : 40"));   si.add(new JLabel("Lebar Plat : 40"));
        si.add(new JLabel("Additional W : 15"));   si.add(new JLabel("Jumlah Plat : 2"));
        v35.setText("40"); v36.setText("40"); v37.setText("80"); v38.setText("2");
        si.add(new JSeparator());           si.add(new JSeparator());
        si.add(new JLabel("Tinggi Plat"));  si.add(v35);
        si.add(new JLabel("Lebar Plat"));   si.add(v36);
        si.add(new JLabel("Additional W")); si.add(v37);
        si.add(new JLabel("Jumlah Plat"));  si.add(v38);
        int si_opt = JOptionPane.showConfirmDialog(null, si, "Input Kalkulasi Support I", JOptionPane.OK_CANCEL_OPTION);
        if(si_opt==JOptionPane.OK_OPTION){
            par35 = v35.getText(); v35.setText("");
            par36 = v36.getText(); v36.setText("");
            par37 = v37.getText(); v37.setText("");
            par38 = v38.getText(); v38.setText("");
        }
        
        //General v4, v5, v39, v40
        JPanel gen = new JPanel(new GridLayout(0,2));
        gen.add(new JLabel("Default :")); gen.add(Box.createHorizontalStrut(20));
        gen.add(new JLabel("Side Qty : 2"));   gen.add(new JLabel("Convert MM to KG : 1000000"));
        gen.add(new JLabel("Additional Fee : 100000"));gen.add(new JLabel("Up Actual Price : 45 %"));   
        v4.setText("2"); v5.setText("1000000"); v39.setText("100000"); v40.setText("45");
        gen.add(new JSeparator());           gen.add(new JSeparator());
        gen.add(new JLabel("Side Qty"));  gen.add(v4);
        gen.add(new JLabel("Convert MM to KG"));   gen.add(v5);
        gen.add(new JLabel("Additional Fee")); gen.add(v39);
        gen.add(new JLabel("Up Actual Price")); gen.add(v40);
        int gen_opt = JOptionPane.showConfirmDialog(null, gen, "Kalkulasi General", JOptionPane.OK_CANCEL_OPTION);
        if(gen_opt==JOptionPane.OK_OPTION){
            par4 = v4.getText(); v4.setText("");
            par5 = v5.getText(); v5.setText("");
            par39= v39.getText(); v39.setText("");
            par40= v40.getText(); v40.setText("");
        }
        System.out.println("par1"+par1);
        System.out.println("par2"+par2);
        System.out.println("par3"+par3);
        System.out.println("par4"+par4);
        System.out.println("par5"+par5);
        System.out.println("par6"+par6);
        System.out.println("par7"+par7);
        System.out.println("par8"+par8);
        System.out.println("par9"+par9);
        System.out.println("par10"+par10);
        System.out.println("par11"+par11);
        System.out.println("par12"+par12);
        System.out.println("par13"+par13);
        System.out.println("par14"+par14);
        System.out.println("par15"+par15);
        System.out.println("par16"+par16);
        System.out.println("par17"+par17);
        System.out.println("par18"+par18);
        System.out.println("par19"+par19);
        System.out.println("par20"+par20);
        System.out.println("par21"+par21);
        System.out.println("par22"+par22);
        System.out.println("par23"+par23);
        System.out.println("par24"+par24);
        System.out.println("par25"+par25);
        System.out.println("par26"+par26);
        System.out.println("par27"+par27);
        System.out.println("par28"+par28);
        System.out.println("par29"+par29);
        System.out.println("par30"+par30);
        System.out.println("par31"+par31);
        System.out.println("par32"+par32);
        System.out.println("par33"+par33);
        System.out.println("par34"+par34);
        System.out.println("par35"+par35);
        System.out.println("par36"+par36);
        System.out.println("par37"+par37);
        System.out.println("par38"+par38);
        System.out.println("par39"+par39);
        System.out.println("par40"+par40);
        
        hitung_semua();
    }

    private void falseddetail() {
        tfheight.setEnabled(false);
        tfweight.setEnabled(false);
        tfdimension.setEnabled(false);
        tfplus.setEnabled(false);
        tfthicknes.setEnabled(false);
        tfbrtjenis.setEnabled(false);
        tfmaterial.setEnabled(false);
        tfcolour.setEnabled(false);
        tflabour.setEnabled(false);
    }

    public void cari(String no) {
        String sql = "select * from product_standing where product_no=?";
        PreparedStatement ps;
        try {
            ps = conec.prepareStatement(sql);
            ps.setString(1, no);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                tfkode.setText(rs.getString("product_no"));
                taspek.setText(rs.getString("specification"));
                tadeskrip.setText(rs.getString("description"));
                cbunit.setSelectedItem(rs.getString("unit"));
                tfheight.setText(rs.getString("height"));
                tfweight.setText(rs.getString("weight"));
                tfdimension.setText(rs.getString("dimension"));
                tfplus.setText(rs.getString("plus"));
                tfthicknes.setText(rs.getString("thickness"));
                tfbrtjenis.setText(rs.getString("berat_jenis"));
                tfmaterial.setText(rs.getString("price_material"));
                tfcolour.setText(rs.getString("price_colour"));
                tflabour.setText(rs.getString("price_labour"));
                tfunp.setText(rs.getString("base_unp"));
                tfA.setText(rs.getString("support_a"));
                tfB.setText(rs.getString("support_b"));
                tfC.setText(rs.getString("support_c"));
                tfD.setText(rs.getString("support_d"));
                tfE.setText(rs.getString("support_e"));
                tfF.setText(rs.getString("support_f"));
                tfG.setText(rs.getString("support_g"));
                tfH.setText(rs.getString("support_h"));
                tfI.setText(rs.getString("support_i"));
                tfupdown.setText(rs.getString("cover_updown"));
                tfrear.setText(rs.getString("door_rear"));
                tfside.setText(rs.getString("cover_side"));
                tftotberat.setText(rs.getString("luas_berat"));
                tfaktual.setText(rs.getString("act_price"));
                tfjual.setText(rs.getString("deal_price"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void save() {
        String kode = tfkode.getText();
        String spek = taspek.getText();
        String desk = tadeskrip.getText();
        String unit = (String)cbunit.getSelectedItem().toString();
        String vh = tfheight.getText();
        String vw = tfweight.getText();
        String vd = tfdimension.getText();
        String vplus = tfplus.getText();
        String vthic = tfthicknes.getText();
        String vjns = tfbrtjenis.getText();
        String vmat = tfmaterial.getText();
        String vcol = tfcolour.getText();
        String vlab = tflabour.getText();
        String unp = tfunp.getText();
        String sa = tfA.getText();
        String sb = tfB.getText();
        String sc = tfC.getText();
        String sd = tfD.getText();
        String se = tfE.getText();
        String sf = tfF.getText();
        String sg = tfG.getText();
        String sh = tfH.getText();
        String si = tfI.getText();
        String updown=tfupdown.getText();
        String rear = tfrear.getText();
        String side = tfside.getText();
        String berat=tftotberat.getText();
        String aktual = tfaktual.getText();
        String jual = tfjual.getText();
        if(!kode.equals("")){// || !vqty.equals("")){
            String sql_cek = "select * from product_standing where product_no=?";
            try {
                PreparedStatement st = conec.prepareStatement(sql_cek);
                st.setString(1, kode);
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    int a = JOptionPane.showConfirmDialog(null,
                            "Data dengan kode : "+kode+"-"+spek+" Sudah ada \n update data?",
                            "Double data",
                            JOptionPane.YES_NO_OPTION);
                    if(a == JOptionPane.YES_OPTION){
                        update();
                    }
                }else{
                    String sql = "insert into product_standing "
                        + " ( product_no, "
                             + "description, "
                             + "specification, "
                             + "unit, "
                             + "height, "
                             + "weight, "
                             + "dimension, "
                             + "plus, "
                             + "thickness, "
                             + "berat_jenis, "
                             + "base_unp, "
                             + "support_a,"
                             + "support_b,"
                             + "support_c, "
                             + "support_d, "
                             + "support_e, "
                             + "support_f, "
                             + "support_g, "
                             + "support_h, "
                             + "support_i, "
                            + "cover_updown, "
                            + "door_rear, "
                            + "cover_side, "
                             + "luas_berat, "
                             + "price_material, "
                             + "price_colour, "
                             + "price_labour, "
                             + "act_price, "
                             + "deal_price"
                         + ") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                     try {
                         PreparedStatement ps = conec.prepareStatement(sql);
                         ps.setString(1, kode);
                         ps.setString(2, desk);
                         ps.setString(3, spek);
                         ps.setString(4, unit);
                         ps.setString(5, vh);
                         ps.setString(6, vw);
                         ps.setString(7, vd);
                         ps.setString(8, vplus);
                         ps.setString(9, vthic);
                         ps.setString(10, vjns);
                         ps.setString(11, unp);
                         ps.setString(12, sa);
                         ps.setString(13, sb);
                         ps.setString(14, sc);
                         ps.setString(15, sd);
                         ps.setString(16, se);
                         ps.setString(17, sf);
                         ps.setString(18, sg);
                         ps.setString(19, sh);
                         ps.setString(20, si);
                         ps.setString(21, updown);
                         ps.setString(22, rear);
                         ps.setString(23, side);
                         ps.setString(24, berat);
                         ps.setString(25, vmat);
                         ps.setString(26, vcol);
                         ps.setString(27, vlab);
                         ps.setString(28, aktual);
                         ps.setString(29, jual);
                         ps.executeUpdate();

                         save_detail();
                         JOptionPane.showMessageDialog(null, "Data berhasil di tambahkan");
                         this.dispose();
                     } catch (SQLException ex) {
                         Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
                     }
                }
            } catch (SQLException ex) {
                Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Kode Product tidak boleh kosong");
        }
    }
    
    public void update(){
        String kode = tfkode.getText();
        String spek = taspek.getText();
        String desk = tadeskrip.getText();
        String unit = (String)cbunit.getSelectedItem().toString();
        String vh = tfheight.getText();
        String vw = tfweight.getText();
        String vd = tfdimension.getText();
        String vplus = tfplus.getText();
        String vthic = tfthicknes.getText();
        String vjns = tfbrtjenis.getText();
        String vmat = tfmaterial.getText();
        String vcol = tfcolour.getText();
        String vlab = tflabour.getText();
        String unp = tfunp.getText();
        String sa = tfA.getText();
        String sb = tfB.getText();
        String sc = tfC.getText();
        String sd = tfD.getText();
        String se = tfE.getText();
        String sf = tfF.getText();
        String sg = tfG.getText();
        String sh = tfH.getText();
        String si = tfI.getText();
        String updown=tfupdown.getText();
        String rear = tfrear.getText();
        String side = tfside.getText();
        String berat=tftotberat.getText();
        String aktual = tfaktual.getText();
        String jual = tfjual.getText();
        
        if(!kode.equals("")){
            String sql_cek = "select * from product_standing where product_no=?";
            try {
                PreparedStatement st = conec.prepareStatement(sql_cek);
                st.setString(1, kode);
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    String sql = "update product_standing set "
                             + "description = ?, "
                             + "specification = ?, "
                             + "unit = ?, "
                             + "height = ?, "
                             + "weight = ?, "
                             + "dimension = ?, "
                             + "plus = ?, "
                             + "thickness = ?, "
                             + "berat_jenis = ?, "
                             + "base_unp = ?, "
                             + "support_a = ?, "
                             + "support_b = ?, "
                             + "support_c = ?, "
                             + "support_d = ?, "
                             + "support_e = ?, "
                             + "support_f = ?, "
                             + "support_g = ?, "
                             + "support_h = ?, "
                             + "support_i = ?, "
                            + "cover_updown = ?, "
                            + "door_rear = ?, "
                            + "cover_side = ?, "
                             + "luas_berat = ?, "
                             + "price_material = ?, "
                             + "price_colour = ?, "
                             + "price_labour = ?, "
                             + "act_price = ?, "
                             + "deal_price = ? "
                             + "where product_no=?";
                     try {
                         PreparedStatement ps = conec.prepareStatement(sql);
                         ps.setString(1, desk);
                         ps.setString(2, spek);
                         ps.setString(3, unit);
                         ps.setString(4, vh);
                         ps.setString(5, vw);
                         ps.setString(6, vd);
                         ps.setString(7, vplus);
                         ps.setString(8, vthic);
                         ps.setString(9, vjns);
                         ps.setString(10, unp);
                         ps.setString(11, sa);
                         ps.setString(12, sb);
                         ps.setString(13, sc);
                         ps.setString(14, sd);
                         ps.setString(15, se);
                         ps.setString(16, sf);
                         ps.setString(17, sg);
                         ps.setString(18, sh);
                         ps.setString(19, si);
                         ps.setString(20, updown);
                         ps.setString(21, rear);
                         ps.setString(22, side);
                         ps.setString(23, berat);
                         ps.setString(24, vmat);
                         ps.setString(25, vcol);
                         ps.setString(26, vlab);
                         ps.setString(27, aktual);
                         ps.setString(28, jual);
                         ps.setString(29, kode);
                         ps.executeUpdate();

                         save_detail();
                         JOptionPane.showMessageDialog(null, "Data berhasil di tambahkan");
                         this.dispose();
                     } catch (SQLException ex) {
                         Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
                     }
                }else{
                    int a = JOptionPane.showConfirmDialog(null,
                            "Data dengan kode : "+kode+"-"+spek+" Belum ada \n tambah data?",
                            "Unknown data",
                            JOptionPane.YES_NO_OPTION);
                    if(a == JOptionPane.YES_OPTION){
                        save();
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Kode Product tidak boleh kosong");
        }
    }

    private void save_detail() {
        String sql_cek = "select * from product_standing_detail where product_no=?";
        try {
            PreparedStatement st = conec.prepareStatement(sql_cek);
            st.setString(1, tfkode.getText());
            ResultSet rs = st.executeQuery();
            if(rs.next()){
                String q = "update product_standing_detail set "
                        + "p1 ="+par1+", "
                        + "p2 ="+par2+", "
                        + "p3 ="+par3+", "
                        + "p4 ="+par4+", "
                        + "p5 ="+par5+", "
                        + "p6 ="+par6+", "
                        + "p7 ="+par7+", "
                        + "p8 ="+par8+", "
                        + "p9 ="+par9+", "
                        + "p10 ="+par10+", "
                        + "p11 ="+par11+", "
                        + "p12 ="+par12+", "
                        + "p13 ="+par13+", "
                        + "p14 ="+par14+", "
                        + "p15 ="+par15+", "
                        + "p16 ="+par16+", "
                        + "p17 ="+par17+", "
                        + "p18 ="+par18+", "
                        + "p19 ="+par19+", "
                        + "p20 ="+par20+", "
                        + "p21 ="+par21+", "
                        + "p22 ="+par22+", "
                        + "p23 ="+par23+", "
                        + "p24 ="+par24+", "
                        + "p25 ="+par25+", "
                        + "p26 ="+par26+", "
                        + "p27 ="+par27+", "
                        + "p28 ="+par28+", "
                        + "p29 ="+par29+", "
                        + "p30 ="+par30+", "
                        + "p31 ="+par31+", "
                        + "p32 ="+par32+", "
                        + "p33 ="+par33+", "
                        + "p34 ="+par34+", "
                        + "p35 ="+par35+", "
                        + "p36 ="+par36+", "
                        + "p37 ="+par37+", "
                        + "p38 ="+par38+", "
                        + "p39 ="+par39+", "
                        + "p40 ="+par40+", "
                        + "where product_no=?";
                PreparedStatement pq = conec.prepareStatement(q);
                pq.setString(1, tfkode.getText());
                pq.executeUpdate();
                
                System.out.println("sukses update detail box");
            }else{
                String sql = "insert into product_standing_detail ("
                    + "product_no, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,"
                        + "p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,"
                        + "p29,p30,p31,p32,p33,p34,p35,p36,p37,p38,p39,p40) "
                    + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                try {
                    PreparedStatement ps = conec.prepareStatement(sql);
                    ps.setString(1, tfkode.getText());
                    ps.setString(2, par1);
                    ps.setString(3, par2);
                    ps.setString(4, par3);
                    ps.setString(5, par4);
                    ps.setString(6, par5);
                    ps.setString(7, par6);
                    ps.setString(8, par7);
                    ps.setString(9, par8);
                    ps.setString(10, par9);
                    ps.setString(11, par10);
                    ps.setString(12, par11);
                    ps.setString(13, par12);
                    ps.setString(14, par13);
                    ps.setString(15, par14);
                    ps.setString(16, par15);
                    ps.setString(17, par16);
                    ps.setString(18, par17);
                    ps.setString(19, par18);
                    ps.setString(20, par19);
                    ps.setString(21, par20);
                    ps.setString(22, par21);
                    ps.setString(23, par22);
                    ps.setString(24, par23);
                    ps.setString(25, par24);
                    ps.setString(26, par25);
                    ps.setString(27, par26);
                    ps.setString(28, par27);
                    ps.setString(29, par28);
                    ps.setString(30, par29);
                    ps.setString(31, par30);
                    ps.setString(32, par31);
                    ps.setString(33, par32);
                    ps.setString(34, par33);
                    ps.setString(35, par34);
                    ps.setString(36, par35);
                    ps.setString(37, par36);
                    ps.setString(38, par37);
                    ps.setString(39, par38);
                    ps.setString(40, par39);
                    ps.setString(41, par40);
                    ps.executeUpdate();
                    
                    System.out.println("sukses simpan detail box");
                } catch (SQLException ex) {
                    Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(panelfsform.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }

    private void hitung_semua() {
        if(par1==null || par2==null || par3==null || par4==null || par5==null || par6==null || par7==null ||
                par8==null || par9==null || par10==null || par11==null || par12==null || par13==null || par14==null ||
                par15==null || par16==null || par17==null || par18==null || par19==null || par20==null || par21==null ||
                par22==null || par23==null || par24==null || par25==null || par26==null || par27==null || par28==null ||
                par29==null || par20==null || par31==null || par32==null || par33==null || par34==null || par35==null ||
                par36==null || par37==null || par38==null || par39==null || par40==null ){
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Data belum bisa di proses, Klik OK", 
                                  "Hapus Data", 
                                  JOptionPane.YES_NO_OPTION); 
            if (selectedOption == JOptionPane.YES_OPTION) { 
                prosesHitung();
                falseddetail();
            } 
        }
        double H = Double.valueOf(tfheight.getText());
        double W = Double.valueOf(tfweight.getText());
        double D = Double.valueOf(tfdimension.getText());
        double P = Double.valueOf(tfplus.getText());
        double T = Double.valueOf(tfthicknes.getText());
        double BJ= Double.valueOf(tfbrtjenis.getText());
        double M = Double.valueOf(tfmaterial.getText());
        double C = Double.valueOf(tfcolour.getText());
        double L = Double.valueOf(tflabour.getText());
        double p1= Double.valueOf(par1);
        double p2= Double.valueOf(par2);
        double p3= Double.valueOf(par3);
        double p4= Double.valueOf(par4);
        double p5= Double.valueOf(par5);
        double p6= Double.valueOf(par6);
        double p7= Double.valueOf(par7);
        double p8= Double.valueOf(par8);
        double p9= Double.valueOf(par9);
        double p10= Double.valueOf(par10);
        double p11= Double.valueOf(par11);
        double p12= Double.valueOf(par12);
        double p13= Double.valueOf(par13);
        double p14= Double.valueOf(par14);
        double p15= Double.valueOf(par15);
        double p16= Double.valueOf(par16);
        double p17= Double.valueOf(par17);
        double p18= Double.valueOf(par18);
        double p19= Double.valueOf(par19);
        double p20= Double.valueOf(par20);
        double p21= Double.valueOf(par21);
        double p22= Double.valueOf(par22);
        double p23= Double.valueOf(par23);
        double p24= Double.valueOf(par24);
        double p25= Double.valueOf(par25);
        double p26= Double.valueOf(par26);
        double p27= Double.valueOf(par27);
        double p28= Double.valueOf(par28);
        double p29= Double.valueOf(par29);
        double p30= Double.valueOf(par30);
        double p31= Double.valueOf(par31);
        double p32= Double.valueOf(par32);
        double p33= Double.valueOf(par33);
        double p34= Double.valueOf(par34);
        double p35= Double.valueOf(par35);
        double p36= Double.valueOf(par36);
        double p37= Double.valueOf(par37);
        double p38= Double.valueOf(par38);
        double p39= Double.valueOf(par39);
        double p40= Double.valueOf(par40);
        
        int base_unp, suppA, suppB, suppC, suppD, suppE, suppF, suppG, suppH,
                suppI, updown, rear, side;
        double base_unp1, suppA1, suppB1, suppC1, suppD1, suppE1, suppF1, suppG1,
                suppH1, suppI1, updown1, rear1, side1;
        
        //base unp
        base_unp1 = (((p1+p2+p2)*p3*((W*p4)+(D*p4)))*BJ/p5);
        base_unp = (int) base_unp1;
        
        //support A
        suppA1 = ((p6+p7+p7+p8+p8)*T*W*BJ/p5)*p9;
        suppA = (int) suppA1;
        
        //support B
        suppB1 = (((p10+p11+p11)*BJ*H*T/p5)*p12);
        suppB = (int) suppB1;
        
        //Support C
        suppC1 = (((p13+p14+p15)*T*D*BJ/p5)*p16);
        suppC = (int) suppC1;
        
        //Support D
        suppD1 = (((p17+p18)*p19*H*BJ)/p5*p20);
        suppD = (int) suppD1;
        
        //Support E
        suppE1 = (((p21+p22+p22)*T*H*BJ)/p5*p23);
        suppE = (int) suppE1;
        
        //Support F
        suppF1 = (((p24+p25+p25+p26+p26)*T*W*BJ)/p5*(H/p24));
        suppF = (int) suppF1;
        
        //Suport G
        suppG1 = (((p27+p28+p29)*T*W*BJ)/p5*p30);
        suppG = (int) suppG1;
        
        //support H
        suppH1 = (((p31+p32+p33)*H*T*BJ)/p5*p34);
        suppH = (int) suppH1;
        
        //Support I
        suppI1 = (((p35+p36)*(W+p37)*T*BJ)/p5*p38);
        suppI = (int) suppI1;
        
        //Up Down
        updown1 = ((((W+P+P)*(D+P+P))*T*BJ)/p5*p4);
        updown = (int) updown1;
        
        //rear
        rear1 = ((((W+P+P)*(H+P+P))*T*BJ)/p5*p4);
        rear = (int) rear1;
        
        side1 = ((((H+P+P)*(D+P+P))*T*BJ)/p5*p4);
        side = (int) side1;
        
        if(cekunp.isSelected()){
            tfunp.setText(String.valueOf(base_unp1));
        }else{
            base_unp1=0;
            tfunp.setText(String.valueOf(base_unp1));
        }
        
        if(cekA.isSelected()){
            tfA.setText(String.valueOf(suppA1));
        }else{
            suppA1 = 0;
            tfA.setText(String.valueOf(suppA1));
        }
        
        if(cekB.isSelected()){
            tfB.setText(String.valueOf(suppB1));
        }else{
            suppB1=0;
            tfB.setText(String.valueOf(suppB1));
        }
        
        if(cekC.isSelected()){
            tfC.setText(String.valueOf(suppC1));
        }else{
            suppC1=0;
            tfC.setText(String.valueOf(suppC1));
        }
        
        if(cekD.isSelected()){
            tfD.setText(String.valueOf(suppD1));
        }else{
            suppD1=0;
            tfD.setText(String.valueOf(suppD1));
        }
        
        if(cekE.isSelected()){
            tfE.setText(String.valueOf(suppE1));
        }else{
            suppE1=0;
            tfE.setText(String.valueOf(suppE1));
        }
        
        if(cekF.isSelected()){
            tfF.setText(String.valueOf(suppF1));
        }else{
            suppF1=0;
            tfF.setText(String.valueOf(suppF1));
        }
        
        if(cekG.isSelected()){
            tfG.setText(String.valueOf(suppG1));
        }else{
            suppG1=0;
            tfG.setText(String.valueOf(suppG1));
        }
        
        if(cekH.isSelected()){
            tfH.setText(String.valueOf(suppH1));
        }else{
            suppH1=0;
            tfH.setText(String.valueOf(suppH1));
        }
        
        if(cekI.isSelected()){
            tfI.setText(String.valueOf(suppI1));
        }else{
            suppI1=0;
            tfI.setText(String.valueOf(suppI1));
        }
        
        if(cekupdown.isSelected()){
            tfupdown.setText(String.valueOf(updown1));
        }else{
            updown1=0;
            tfupdown.setText(String.valueOf(updown1));
        }
        
        if(cekrear.isSelected()){
            tfrear.setText(String.valueOf(rear1));
        }else{
            rear1=0;
            tfrear.setText(String.valueOf(rear1));
        }
        
        if(cekside.isSelected()){
            tfside.setText(String.valueOf(side1));
        }else{
            side1=0;
            tfside.setText(String.valueOf(side1));
        }
        
        double berat1 = Double.valueOf(tfunp.getText()) +
                Double.valueOf(tfA.getText())+
                Double.valueOf(tfB.getText())+
                Double.valueOf(tfC.getText())+
                Double.valueOf(tfD.getText())+
                Double.valueOf(tfE.getText())+
                Double.valueOf(tfF.getText())+
                Double.valueOf(tfG.getText())+
                Double.valueOf(tfH.getText())+
                Double.valueOf(tfI.getText())+
                Double.valueOf(tfupdown.getText())+
                Double.valueOf(tfrear.getText())+
                Double.valueOf(tfside.getText());
        int berat = (int) Math.round(berat1);
        tftotberat.setText(String.valueOf(berat));
                
        double aktual1 = berat1*(M+C+L)+p39;
        int aktual = (int) Math.round(aktual1);
        tfaktual.setText(String.valueOf(aktual));
        
        double persen = p40/100;
        double jual1 = Double.valueOf(tfaktual.getText())/persen;
        int jual = (int) Math.round(jual1);
        tfjual.setText(String.valueOf(jual));
    }

}
